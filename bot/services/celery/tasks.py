from bot.celery_app import celery_app
from bot.database.database import get_session
from bot.models.shipment_request import Shipment_request
from bot.services.google_services.sheets_client import RequestSheetManager
from bot.handlers.client import crud
from bot.services.google_services.utils import request_to_row
from bot.services.loader import bot


@celery_app.task
def ensure_client_request_sheet(tg_id: int):
    """
    –§–æ–Ω–æ–≤–∞ —Ç–∞—Å–∫–∞: —Å—Ç–≤–æ—Ä—é—î (–∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î —ñ—Å–Ω—É—é—á–∏–π) Google Sheet –¥–ª—è –∑–∞—è–≤–æ–∫ –∫–ª—ñ—î–Ω—Ç–∞.
    –ö–æ–ª–∏ –≥–æ—Ç–æ–≤–æ ‚Äî –æ–Ω–æ–≤–ª—é—î –ë–î —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.
    """
    manager = RequestSheetManager()

    # –ë–µ—Ä–µ–º–æ –∑ –ë–î –ø–æ—Ç–æ—á–Ω–∏–π client (—â–æ–± –ø—ñ–¥—Ç—è–≥–Ω—É—Ç–∏ google_sheet_id/url)
    import asyncio

    async def _do():
        client = await crud.get_client_by_telegram_id(tg_id)

        sheet_id, sheet_url = manager.ensure_request_sheet_for_client(
            tg_id=tg_id,
            client_full_name=client.full_name,
            client_email=client.email,
            google_sheet_id=client.google_sheet_id,
            google_sheet_url=client.google_sheet_url,
        )

        if (client.google_sheet_id != sheet_id) or (
            client.google_sheet_url != sheet_url
        ):
            await crud.update_client_sheet_by_telegram(tg_id, sheet_id, sheet_url)

        # —Å–ø–æ–≤—ñ—â–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É Telegram
        kb = {
            "inline_keyboard": [
                [{"text": "üîó –í—ñ–¥–∫—Ä–∏—Ç–∏ –∑–∞—è–≤–∫–∏", "url": sheet_url}],
                [
                    {
                        "text": "‚úçÔ∏è –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∑–∞—è–≤–∫—É",
                        "callback_data": "client_application",
                    }
                ],
            ]
        }
        await bot.send_message(
            tg_id,
            "‚úÖ –í–∞—à Google Sheet –∑ –∑–∞—è–≤–∫–∞–º–∏ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!",
            reply_markup=kb,
        )

    asyncio.run(_do())


@celery_app.task
def ensure_sheet_and_append_request_row(tg_id: int, request_id: int):
    """
    1) –±–µ—Ä–µ–º–æ –∫–ª—ñ—î–Ω—Ç–∞ —ñ –∑–∞—è–≤–∫—É –∑ –ë–î (—á–µ—Ä–µ–∑ crud)
    2) –∑–∞–±–µ–∑–ø–µ—á—É—î–º–æ —Ñ–∞–π–ª (—á–µ—Ä–µ–∑ RequestSheetManager)
    3) —è–∫—â–æ —Ñ–∞–π–ª –Ω–æ–≤–∏–π ‚Äî –æ–Ω–æ–≤–ª—é—î–º–æ –ë–î (—á–µ—Ä–µ–∑ crud.ensure_client_sheet_binding)
    4) –¥–æ–¥–∞—î–º–æ —Ä—è–¥–æ–∫ —É –ª–∏—Å—Ç "–ó–∞—è–≤–∫–∏"
    5) (–æ–ø—Ü.) –º–æ–∂–Ω–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —é–∑–µ—Ä—É –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é
    """
    import asyncio

    async def _run():
        client, req = await crud.get_client_and_request(tg_id, request_id)
        if not client or not req:
            return

        mgr = RequestSheetManager()
        sheet_id, sheet_url = mgr.ensure_request_sheet_for_client(
            tg_id=tg_id,
            client_full_name=client.full_name,
            client_email=client.email,
            google_sheet_id=client.google_sheet_id,
            google_sheet_url=client.google_sheet_url,
        )

        # –æ–Ω–æ–≤–ª—é—î–º–æ –±—ñ–Ω–¥, —è–∫—â–æ —Ç—Ä–µ–±–∞
        await crud.ensure_client_sheet_binding(tg_id, sheet_id, sheet_url)

        # –¥–æ–¥–∞—î–º–æ —Ä—è–¥–æ–∫
        mgr.svc_sheets.put_row(sheet_id, "–ó–∞—è–≤–∫–∏", request_to_row(req))

        # (–æ–ø—Ü—ñ–π–Ω–æ) –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —é–∑–µ—Ä—É
        try:
            kb = {
                "inline_keyboard": [[{"text": "üîó –í—ñ–¥–∫—Ä–∏—Ç–∏ –∑–∞—è–≤–∫–∏", "url": sheet_url}]]
            }
            await bot.send_message(
                chat_id=tg_id,
                text="‚úÖ –ó–∞—è–≤–∫—É –¥–æ–¥–∞–Ω–æ —É –≤–∞—à Google Sheet.",
                reply_markup=kb,
            )
        except Exception:
            pass

    asyncio.run(_run())


@celery_app.task
def append_request_to_sheet_task(tg_id: int, request_id: int):
    """
    –î–æ–¥–∞—î –∑–∞—è–≤–∫—É –≤ Google Sheet –∫–ª—ñ—î–Ω—Ç–∞.
    """
    import asyncio
    from bot.database.database import get_session
    from sqlalchemy.future import select
    from bot.models.client import Client

    async def _do():
        async for session in get_session():
            result = await session.execute(
                select(Shipment_request).where(Shipment_request.id == request_id)
            )
            request: Shipment_request | None = result.scalar_one_or_none()

            result = await session.execute(
                select(Client).where(Client.telegram_id == tg_id)
            )
            client: Client | None = result.scalar_one_or_none()

            if not request or not client or not client.google_sheet_id:
                return

            mgr = RequestSheetManager()
            mgr.svc_sheets.put_row(
                client.google_sheet_id, "–ó–∞—è–≤–∫–∏", request_to_row(request)
            )

    asyncio.run(_do())


@celery_app.task
def notify_carriers_task(request_id: int):
    """
    –°–ø–æ–≤—ñ—â–∞—î –ø–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫—ñ–≤ –ø—Ä–æ –Ω–æ–≤—É –∑–∞—è–≤–∫—É.
    """
    import asyncio
    from bot.database.database import get_session
    from sqlalchemy.future import select

    async def _do():
        async for session in get_session():
            result = await session.execute(
                select(Shipment_request).where(Shipment_request.id == request_id)
            )
            request: Shipment_request | None = result.scalar_one_or_none()

            if not request:
                return

            from bot.services.notifier import notify_carriers

            await notify_carriers(bot, request)

    asyncio.run(_do())
