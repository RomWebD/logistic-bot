"""
–°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏ - –≤—Å—è –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∞ —Ç—É—Ç
"""

from bot.services.base_service import BaseService
from bot.repositories.client_repository import ClientRepository
from bot.models.client import Client
from typing import Optional, Dict, Any
from dataclasses import dataclass


@dataclass
class ClientRegistrationData:
    """
    Data Transfer Object (DTO) - —Ü–µ –ø–∞—Ç–µ—Ä–Ω –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –¥–∞–Ω–∏—Ö.
    –ó–∞–º—ñ—Å—Ç—å –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –∫—É–ø—É –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤, –ø–µ—Ä–µ–¥–∞—î–º–æ –æ–¥–∏–Ω –æ–±'—î–∫—Ç.
    """
    telegram_id: int
    full_name: str
    phone: str


class ClientService(BaseService):
    """
    –°–µ—Ä–≤—ñ—Å –¥–ª—è –∫–ª—ñ—î–Ω—Ç—ñ–≤.
    –¢—É—Ç –≤—Å—è –ª–æ–≥—ñ–∫–∞: –≤–∞–ª—ñ–¥–∞—Ü—ñ—è, –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, –±—ñ–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞.
    """
    
    async def register_client(self, data: ClientRegistrationData) -> Dict[str, Any]:
        """
        –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ –∑ —É—Å—ñ–º–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏.
        –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –¥–ª—è –≥–Ω—É—á–∫–æ—Å—Ç—ñ.
        """
        try:
            repo = ClientRepository(self.session)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
            existing = await repo.get_by_telegram_id(data.telegram_id)
            if existing:
                return {
                    "success": False,
                    "message": "üîÅ –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –∫–ª—ñ—î–Ω—Ç",
                    "client": existing
                }
            
            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–µ–ª–µ—Ñ–æ–Ω—É
            if not self._validate_phone(data.phone):
                return {
                    "success": False,
                    "message": "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: +380XXXXXXXXX"
                }
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
            client = await repo.create(
                telegram_id=data.telegram_id,
                full_name=data.full_name,
                phone=data.phone
            )
            
            await self.session.commit()
            
            return {
                "success": True,
                "message": "‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!",
                "client": client
            }
            
        except Exception as e:
            await self.session.rollback()
            await self.handle_error(e, "ClientService.register_client")
            return {
                "success": False,
                "message": "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
            }
    
    async def get_client(self, telegram_id: int) -> Optional[Client]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ telegram_id"""
        repo = ClientRepository(self.session)
        return await repo.get_by_telegram_id(telegram_id)
    
    async def update_client_info(self, telegram_id: int, **kwargs) -> bool:
        """–û–Ω–æ–≤–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∫–ª—ñ—î–Ω—Ç–∞"""
        repo = ClientRepository(self.session)
        client = await repo.get_by_telegram_id(telegram_id)
        
        if not client:
            return False
        
        await repo.update(client.id, **kwargs)
        await self.session.commit()
        return True
    
    def _validate_phone(self, phone: str) -> bool:
        """–ü—Ä–∏–≤–∞—Ç–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó (–ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è = –ø—Ä–∏–≤–∞—Ç–Ω–∏–π)"""
        # –ü—Ä–æ—Å—Ç–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤
        cleaned = ''.join(filter(str.isdigit, phone))
        return len(cleaned) in [10, 12] and (
            cleaned.startswith('380') or cleaned.startswith('0')
        )