# bot/decorators/access.py
from functools import wraps
from aiogram.types import Message, CallbackQuery, BotCommandScopeChat
from bot.services.verification import CarrierStatus, get_carrier_status
from typing import Union

from bot.services.client.verification_client import ClientStatus, get_client_status
from bot.ui.keyboards import client_main_kb

from bot.fsm.client_registration import start_registration_flow
from bot.services.client.registration import ClientRegistrationService


def require_verified_carrier():
    def decorator(func):
        @wraps(func)
        async def wrapper(message: Message, *args, **kwargs):
            telegram_id = message.from_user.id
            status = await get_carrier_status(telegram_id)

            if status == CarrierStatus.VERIFIED:
                return await func(message, *args, **kwargs)

            elif status == CarrierStatus.NOT_VERIFIED:
                await message.answer(
                    "‚è≥ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å —â–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é.\n–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                    reply_markup=client_main_kb(is_verified=False),
                )
                return

            elif status == CarrierStatus.NOT_REGISTERED:
                # üßº –í—ñ–¥—á–∏—â–∞—î–º–æ –º–µ–Ω—é
                await message.bot.delete_my_commands(
                    scope=BotCommandScopeChat(chat_id=telegram_id)
                )
                await message.answer(
                    "‚ùå –í–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–∏—Å—Ç–µ–º—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ /start."
                )
                return

        return wrapper

    return decorator


def require_registered_client():
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –≥–∞—Ä–∞–Ω—Ç—É—î, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î —è–∫ Client.
    –Ø–∫—â–æ –Ω—ñ ‚Äî –∑–∞–ø—É—Å–∫–∞—î flow —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.
    """

    def decorator(func):
        @wraps(func)
        async def wrapper(event: Union[Message, CallbackQuery], *args, **kwargs):
            session = kwargs.get("session")  # –ø–µ—Ä–µ–¥–∞—î—à —ñ–∑ handler —á–µ—Ä–µ–∑ Depends
            service = ClientRegistrationService(session)

            user = (
                event.from_user if isinstance(event, (Message, CallbackQuery)) else None
            )
            if not user:
                return

            client = await service.check_existing(user.id)
            if not client:
                if isinstance(event, CallbackQuery):
                    await event.answer()  # –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –ª–æ–∞–¥—ñ–Ω–≥ –∫—Ä—É–∂–æ–∫
                    await start_registration_flow(
                        event.message, state=kwargs.get("state")
                    )
                else:
                    await start_registration_flow(event, state=kwargs.get("state"))
                return

            return await func(event, *args, **kwargs)

        return wrapper

    return decorator


def require_verified_client():
    def decorator(func):
        @wraps(func)
        async def wrapper(
            event: Union[Message, CallbackQuery],
            *args,
            **kwargs,
        ):
            user = event.from_user
            telegram_id = user.id
            client_repo = kwargs.get("client_repo")
            client = await client_repo.get_by_telegram_id(telegram_id)
            # —è–∫—â–æ –∫–ª—ñ—î–Ω—Ç–∞ –Ω–µ–º–∞—î
            if not client:
                # —Ä–µ–¥—ñ—Ä–µ–∫—Ç–∏–º–æ –Ω–∞ /start
                if isinstance(event, CallbackQuery):
                    await event.message.bot.delete_my_commands(
                        scope=BotCommandScopeChat(chat_id=telegram_id)
                    )
                    await event.message.answer(
                        "‚ùå –í–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–∏—Å—Ç–µ–º—ñ. –ü–æ—á–Ω—ñ—Ç—å –∑ /start."
                    )
                    await event.answer()
                else:
                    await event.bot.delete_my_commands(
                        scope=BotCommandScopeChat(chat_id=telegram_id)
                    )
                    await event.answer(
                        "‚ùå –í–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–∏—Å—Ç–µ–º—ñ. –ü–æ—á–Ω—ñ—Ç—å –∑ /start."
                    )
                return

            # —è–∫—â–æ –≤ –ë–î –ª–µ–∂–∏—Ç—å str, –∞ –≤ –∫–æ–¥—ñ Enum ‚Äî –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ
            status = await get_client_status(telegram_id)

            if not status:
                try:
                    status = ClientStatus(status)
                except Exception:
                    status = ClientStatus.NOT_VERIFIED

            if status == ClientStatus.VERIFIED:
                # –ø—É—Å–∫–∞—î–º–æ –≤ —Ö–µ–Ω–¥–ª–µ—Ä; –í–ê–ñ–õ–ò–í–û: –Ω–µ –ø–µ—Ä–µ–¥–∞—î–º–æ client_repo/session –¥–∞–ª—ñ,
                # —è–∫—â–æ —Ö–µ–Ω–¥–ª–µ—Ä —ó—Ö –Ω–µ –æ—á—ñ–∫—É—î
                return await func(event, *args, **kwargs)

            if status == ClientStatus.NOT_VERIFIED:
                msg = (
                    "‚è≥ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å —â–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é.\n"
                    "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                )
                if isinstance(event, CallbackQuery):
                    await event.message.answer(
                        msg, reply_markup=client_main_kb(is_verified=False)
                    )
                    await event.answer()
                else:
                    await event.answer(
                        msg, reply_markup=client_main_kb(is_verified=False)
                    )
                return

            # fallback (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫ —ñ–Ω—à–∏—Ö —Å—Ç–∞–Ω—ñ–≤)
            if isinstance(event, CallbackQuery):
                await event.message.answer(
                    "‚ùå –î–æ—Å—Ç—É–ø –æ–±–º–µ–∂–µ–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏."
                )
                await event.answer()
            else:
                await event.answer("‚ùå –î–æ—Å—Ç—É–ø –æ–±–º–µ–∂–µ–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.")

        return wrapper

    return decorator
