# bot/decorators/access.py
from functools import wraps
from aiogram.types import Message
from bot.services.verification import CarrierStatus, get_carrier_status

from aiogram.types import BotCommandScopeChat


def require_verified_carrier():
    def decorator(func):
        @wraps(func)
        async def wrapper(message: Message, *args, **kwargs):
            telegram_id = message.from_user.id
            status = await get_carrier_status(telegram_id)

            if status == CarrierStatus.VERIFIED:
                return await func(message, *args, **kwargs)

            elif status == CarrierStatus.NOT_VERIFIED:
                await message.answer(
                    "‚ö†Ô∏è –í–∏ —â–µ –Ω–µ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω—ñ. –ó–∞—á–µ–∫–∞–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                )
                return

            elif status == CarrierStatus.NOT_REGISTERED:
                # üßº –í—ñ–¥—á–∏—â–∞—î–º–æ –º–µ–Ω—é
                await message.bot.delete_my_commands(
                    scope=BotCommandScopeChat(chat_id=telegram_id)
                )
                await message.answer(
                    "‚ùå –í–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–∏—Å—Ç–µ–º—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ /start."
                )
                return

        return wrapper

    return decorator
