# bot/decorators/access.py
from functools import wraps
from aiogram.types import Message, CallbackQuery, BotCommandScopeChat
from bot.services.verification import CarrierStatus, get_carrier_status
from typing import Union

from bot.services.client.verification_client import ClientStatus, get_client_status
from bot.ui.keyboards import client_main_kb


def require_verified_carrier():
    def decorator(func):
        @wraps(func)
        async def wrapper(message: Message, *args, **kwargs):
            telegram_id = message.from_user.id
            status = await get_carrier_status(telegram_id)

            if status == CarrierStatus.VERIFIED:
                return await func(message, *args, **kwargs)

            elif status == CarrierStatus.NOT_VERIFIED:
                await message.answer(
                    "‚è≥ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å —â–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é.\n–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                    reply_markup=client_main_kb(is_verified=False),
                )
                return

            elif status == CarrierStatus.NOT_REGISTERED:
                # üßº –í—ñ–¥—á–∏—â–∞—î–º–æ –º–µ–Ω—é
                await message.bot.delete_my_commands(
                    scope=BotCommandScopeChat(chat_id=telegram_id)
                )
                await message.answer(
                    "‚ùå –í–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–∏—Å—Ç–µ–º—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ /start."
                )
                return

        return wrapper

    return decorator


# def require_verified_client():
#     def decorator(func):
#         @wraps(func)
#         async def wrapper(event: Union[Message, CallbackQuery], *args, **kwargs):
#             user = (
#                 event.from_user if isinstance(event, CallbackQuery) else event.from_user
#             )
#             chat_id = user.id
#             status = await get_client_status(chat_id)

#             if status == ClientStatus.VERIFIED:
#                 return await func(event, *args, **kwargs)

#             if status == ClientStatus.NOT_VERIFIED:
#                 # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–µ–∫—Ç–Ω–æ —ñ –¥–ª—è Message, —ñ –¥–ª—è CallbackQuery
#                 if isinstance(event, CallbackQuery):
#                     await event.message.answer(
#                         "‚è≥ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å —â–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é.\n–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
#                         reply_markup=client_main_kb(is_verified=False),
#                     )
#                     await event.answer()
#                 else:
#                     await event.answer(
#                         "‚è≥ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å —â–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é.\n–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
#                         reply_markup=client_main_kb(is_verified=False),
#                     )
#                 return

#             # NOT_REGISTERED
#             if isinstance(event, CallbackQuery):
#                 await event.message.bot.delete_my_commands(
#                     scope=BotCommandScopeChat(chat_id=chat_id)
#                 )
#                 await event.message.answer(
#                     "‚ùå –í–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–∏—Å—Ç–µ–º—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ /start."
#                 )
#                 await event.answer()
#             else:
#                 await event.bot.delete_my_commands(
#                     scope=BotCommandScopeChat(chat_id=chat_id)
#                 )
#                 await event.answer(
#                     "‚ùå –í–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–∏—Å—Ç–µ–º—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ /start."
#                 )

#         return wrapper

#     return decorator

from functools import wraps
from typing import Union
from aiogram.types import Message, CallbackQuery, BotCommandScopeChat

from bot.fsm.client_registration import start_registration_flow
from bot.services.client.registration import ClientRegistrationService
from bot.services.client.verification_client import ClientStatus
from bot.ui.keyboards import client_main_kb


def require_registered_client():
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –≥–∞—Ä–∞–Ω—Ç—É—î, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î —è–∫ Client.
    –Ø–∫—â–æ –Ω—ñ ‚Äî –∑–∞–ø—É—Å–∫–∞—î flow —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.
    """

    def decorator(func):
        @wraps(func)
        async def wrapper(event: Union[Message, CallbackQuery], *args, **kwargs):
            session = kwargs.get("session")  # –ø–µ—Ä–µ–¥–∞—î—à —ñ–∑ handler —á–µ—Ä–µ–∑ Depends
            service = ClientRegistrationService(session)

            user = (
                event.from_user if isinstance(event, (Message, CallbackQuery)) else None
            )
            if not user:
                return

            client = await service.check_existing(user.id)
            if not client:
                if isinstance(event, CallbackQuery):
                    await event.answer()  # –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –ª–æ–∞–¥—ñ–Ω–≥ –∫—Ä—É–∂–æ–∫
                    await start_registration_flow(
                        event.message, state=kwargs.get("state")
                    )
                else:
                    await start_registration_flow(event, state=kwargs.get("state"))
                return

            return await func(event, *args, **kwargs)

        return wrapper

    return decorator


def require_verified_client():
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞—Ç—É—Å –∫–ª—ñ—î–Ω—Ç–∞.
    –Ø–∫—â–æ VERIFIED ‚Üí –ø—É—Å–∫–∞—î –¥–∞–ª—ñ, —ñ–Ω–∞–∫—à–µ –ø–æ–∫–∞–∑—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å.
    """

    def decorator(func):
        @wraps(func)
        async def wrapper(event: Union[Message, CallbackQuery], *args, **kwargs):
            session = kwargs.get("session")
            service = ClientRegistrationService(session)

            user = event.from_user
            chat_id = user.id
            status = await service.get_status(chat_id)

            if status == ClientStatus.VERIFIED:
                return await func(event, *args, **kwargs)

            if status == ClientStatus.NOT_VERIFIED:
                msg = "‚è≥ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å —â–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é.\n–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                if isinstance(event, CallbackQuery):
                    await event.message.answer(
                        msg, reply_markup=client_main_kb(is_verified=False)
                    )
                    await event.answer()
                else:
                    await event.answer(
                        msg, reply_markup=client_main_kb(is_verified=False)
                    )
                return

            # fallback, —è–∫—â–æ NOT_REGISTERED (–∞–ª–µ —Å—é–¥–∏ –ø–æ —ñ–¥–µ—ó –Ω–µ –¥—ñ–π–¥–µ,
            # –±–æ —Å–ø—Ä–∞—Ü—é—î –ø–µ—Ä—à–∏–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä require_registered_client)
            if isinstance(event, CallbackQuery):
                await event.message.bot.delete_my_commands(
                    scope=BotCommandScopeChat(chat_id=chat_id)
                )
                await event.message.answer(
                    "‚ùå –í–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–∏—Å—Ç–µ–º—ñ. –ü–æ—á–Ω—ñ—Ç—å –∑ /start."
                )
                await event.answer()
            else:
                await event.bot.delete_my_commands(
                    scope=BotCommandScopeChat(chat_id=chat_id)
                )
                await event.answer("‚ùå –í–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–∏—Å—Ç–µ–º—ñ. –ü–æ—á–Ω—ñ—Ç—å –∑ /start.")

        return wrapper

    return decorator
