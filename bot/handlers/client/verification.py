# bot/handlers/client/verification.py
from aiogram import Router, F
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    BotCommand,
    BotCommandScopeChat,
)
from aiogram.exceptions import TelegramBadRequest
from bot.services.client.registration import ClientRegistrationService
from bot.handlers.client import crud
from bot.ui.keyboards import client_main_kb
from sqlalchemy.ext.asyncio import AsyncSession

router = Router()


@router.callback_query(F.data == "client_check_status")
async def handle_client_check_status(callback: CallbackQuery, session: AsyncSession):
    await callback.answer("–ü–µ—Ä–µ–≤—ñ—Ä—è—é —Å—Ç–∞—Ç—É—Å‚Ä¶")
    tg_id = callback.from_user.id
    service = ClientRegistrationService(session=session)
    client = await service.check_existing(tg_id)
    if not client:
        # –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î —É –ë–î ‚Äî –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üì¶ –Ø –∫–ª—ñ—î–Ω—Ç", callback_data="role_client")]
            ]
        )
        await _safe_edit_or_send(
            callback,
            text="‚õîÔ∏è –í–∞—Å —â–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–æ–π–¥—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é.",
            reply_markup=kb,
        )
        return

    if client.is_verified:
        # ‚úÖ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π ‚Äî –æ–Ω–æ–≤–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É —ñ —Ç–µ–∫—Å—Ç
        success_text = (
            "‚úÖ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ!\n"
            "–ú–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–µ—Ä—à—É –∑–∞—è–≤–∫—É –∞–±–æ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é."
        )

        # (–æ–ø—Ü—ñ–π–Ω–æ) –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É
        try:
            await callback.bot.set_my_commands(
                commands=[
                    BotCommand(command="client_menu", description="–ú–µ–Ω—é –∫–ª—ñ—î–Ω—Ç–∞"),
                ],
                scope=BotCommandScopeChat(chat_id=tg_id),
            )
        except Exception:
            # —è–∫—â–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ
            pass

        await _safe_edit_or_send(
            callback,
            text=success_text,
            reply_markup=client_main_kb(is_verified=True),
        )
    else:
        # ‚è≥ —â–µ –æ—á—ñ–∫—É—î ‚Äî –∑–∞–ª–∏—à–∞—î–º–æ –æ–±–º–µ–∂–µ–Ω–µ –º–µ–Ω—é
        pending_text = (
            "‚è≥ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å —â–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é.\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )

        # (–æ–ø—Ü—ñ–π–Ω–æ) –ø—Ä–∏–±—Ä–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏, —è–∫—â–æ –±—É–ª–∏ (—â–æ–± –º–µ–Ω—é –Ω–µ –ª–∏—à–∞–ª–æ—Å—å –ø—ñ—Å–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É)
        try:
            await callback.bot.delete_my_commands(
                scope=BotCommandScopeChat(chat_id=tg_id)
            )
        except Exception:
            pass

        await _safe_edit_or_send(
            callback,
            text=pending_text,
            reply_markup=client_main_kb(is_verified=False),
        )


async def _safe_edit_or_send(
    callback: CallbackQuery, text: str, reply_markup: InlineKeyboardMarkup
):
    """
    –ê–∫—É—Ä–∞—Ç–Ω–æ –æ–Ω–æ–≤–ª—é—î —ñ—Å–Ω—É—é—á–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç/–∫–ª–∞–≤—É).
    –Ø–∫—â–æ Telegram –Ω–µ –¥–æ–∑–≤–æ–ª—è—î —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è (–≤–∏–¥–∞–ª–µ–Ω–æ/–∑–º—ñ–Ω–µ–Ω–æ), —à–ª–µ –Ω–æ–≤–µ.
    """
    try:
        # –°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–µ–∫—Å—Ç —ñ –∫–ª–∞–≤—É –≤ –æ–¥–Ω–æ–º—É –≤–∏–∫–ª–∏–∫—É
        await callback.message.edit_text(text=text, reply_markup=reply_markup)
    except TelegramBadRequest:
        try:
            # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–º—ñ–Ω–∏—Ç–∏ —Ç–µ–∫—Å—Ç ‚Äî —Ö–æ—á–∞ –± –∫–ª–∞–≤—É
            await callback.message.edit_reply_markup(reply_markup=reply_markup)
            await callback.message.answer(text, reply_markup=None)
        except TelegramBadRequest:
            # –Ø–∫—â–æ —ñ –∫–ª–∞–≤—É –Ω–µ –º–æ–∂–Ω–∞ ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await callback.message.answer(text, reply_markup=reply_markup)
