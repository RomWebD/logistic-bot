# bot/handlers/client/menu.py
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram import Router, F
from aiogram.fsm.context import FSMContext

from bot.decorators.access import require_verified
from bot.handlers.carrier_company.car_registration.fsm_helpers import (
    deactivate_inline_keyboard,
)

from bot.repositories.client_repository import ClientRepository
from bot.repositories.google_sheet_repository import GoogleSheetRepository
from bot.repositories.shipment_repository import ShipmentRepository
from bot.models.google_sheets_binding import SheetStatus, OwnerType, SheetType

from bot.services.celery.task_tracker import is_sheet_job_active
from bot.services.celery.tasks import ensure_client_request_sheet
from bot.ui.main_menu import Role

router = Router()

client_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="‚úçÔ∏è –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É"),
            KeyboardButton(text="üìã –ú–æ—ó –∑–∞—è–≤–∫–∏"),
        ],
        [KeyboardButton(text="üì¶ –ê–∫—Ç–∏–≤–Ω—ñ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è")],
        [KeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é")],
        [KeyboardButton(text="üÜò –ü—ñ–¥—Ç—Ä–∏–º–∫–∞")],
    ],
    resize_keyboard=True,
    input_field_placeholder="–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é",
    one_time_keyboard=False,
)


async def show_client_menu(target: Message | CallbackQuery):
    text = (
        "üìÅ –í–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é –∫–ª—ñ—î–Ω—Ç–∞.\n\n"
        "–°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–∞—è–≤–æ–∫."
    )
    if isinstance(target, CallbackQuery):
        await target.answer()
        try:
            await target.message.delete()
        except Exception:
            pass
        await target.message.answer(
            text=text, reply_markup=client_menu_keyboard, parse_mode="HTML"
        )
    else:
        await target.answer(
            text=text, reply_markup=client_menu_keyboard, parse_mode="HTML"
        )


@router.message(F.text == "/client_menu")
@require_verified(Role.CLIENT)
async def handle_menu_command(
    message: Message, state: FSMContext, client_repo: ClientRepository
):
    await state.clear()
    await show_client_menu(message)


@router.callback_query(F.data == "client_menu")
@require_verified(Role.CLIENT)
async def handle_menu_callback(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer()
    await deactivate_inline_keyboard(callback.message)
    await show_client_menu(callback.message)


@router.message(F.text == "üìã –ú–æ—ó –∑–∞—è–≤–∫–∏")
@require_verified(Role.CLIENT)
async def handle_my_requests(
    message: Message,
    client_repo: ClientRepository,
    sheet_repo: GoogleSheetRepository,
    shipment_repo: ShipmentRepository,
):
    telegram_id = message.from_user.id

    client = await client_repo.get_by_telegram_id(telegram_id)
    if not client:
        # —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–æ –Ω–µ –¥—ñ–π–¥–µ, –±–æ require_verified_client
        await message.answer("‚õîÔ∏è –í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –∫–ª—ñ—î–Ω—Ç.")
        return

    total = await shipment_repo.count_by_client(telegram_id)
    if total == 0:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úçÔ∏è –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É", callback_data="client_application"
                    )
                ]
            ]
        )
        await message.answer(
            "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞—è–≤–æ–∫. –°—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—à—É ‚Äî —ñ —Ç–æ–¥—ñ –º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ–¥–≥–æ—Ç—É—î–º–æ Google Sheet.",
            reply_markup=kb,
        )
        return

    # Redis-–ª–æ–∫
    if is_sheet_job_active(telegram_id):
        await message.answer(
            "‚è≥ –í–∞—à Google Sheet —Ñ–æ—Ä–º—É—î—Ç—å—Å—è, –∑–∞—á–µ–∫–∞–π—Ç–µ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥..."
        )
        return

    # –°–ø—Ä–æ–±–∞ –∑–Ω–∞–π—Ç–∏ –≥–æ—Ç–æ–≤–∏–π binding
    binding = await sheet_repo.get_ready_binding_by_owner_and_type(
        telegram_id=telegram_id,
        owner_type=OwnerType.CLIENT,
        sheet_type=SheetType.REQUESTS,
    )

    if binding and binding.sheet_url:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîó –ú–æ—ó –∑–∞—è–≤–∫–∏", url=binding.sheet_url)],
                [
                    InlineKeyboardButton(
                        text="‚úçÔ∏è –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∑–∞—è–≤–∫—É",
                        callback_data="client_application",
                    )
                ],
            ]
        )
        await message.answer("üîó –í–∞—à—ñ –∑–∞—è–≤–∫–∏:", reply_markup=kb)
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É (–º–æ–∂–µ –±—É—Ç–∏ FAILED / NONE / CREATING)
    binding = await sheet_repo.get_or_create(
        telegram_id=telegram_id,
        owner_type=OwnerType.CLIENT,
        sheet_type=SheetType.REQUESTS,
    )

    if binding.status == SheetStatus.FAILED:
        await message.answer(
            "‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ Google Sheet. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
        )
        ensure_client_request_sheet.delay(telegram_id)
        return

    # NONE –∞–±–æ CREATING –∞–±–æ READY –±–µ–∑ url ‚Üí –∑–∞–ø—É—Å–∫–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
    await message.answer("‚è≥ –§–æ—Ä–º—É—î–º–æ –≤–∞—à Google Sheet —ñ–∑ –∑–∞—è–≤–∫–∞–º–∏...")
    ensure_client_request_sheet.delay(telegram_id)
