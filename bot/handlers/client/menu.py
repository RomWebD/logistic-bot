from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message, CallbackQuery
from aiogram import Router, F
from bot.decorators.access import require_verified_client
from bot.handlers.carrier_company.car_registration.fsm_helpers import (
    deactivate_inline_keyboard,
)
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot.handlers.client import crud
from bot.services.google_services.sheets_client import RequestSheetManager
from bot.services.celery.tasks import ensure_client_request_sheet

router = Router()
client_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="‚úçÔ∏è –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É"),
            KeyboardButton(text="üìã –ú–æ—ó –∑–∞—è–≤–∫–∏"),
        ],
        [KeyboardButton(text="üì¶ –ê–∫—Ç–∏–≤–Ω—ñ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è")],
        [KeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é")],
        [KeyboardButton(text="üÜò –ü—ñ–¥—Ç—Ä–∏–º–∫–∞")],
    ],
    resize_keyboard=True,
    input_field_placeholder="–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é",
    one_time_keyboard=False,
)


async def show_client_menu(target: Message | CallbackQuery):
    text = (
        "üìÅ –í–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é –∫–ª—ñ—î–Ω—Ç–∞.\n\n"
        "–°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–∞—è–≤–æ–∫."
    )

    if isinstance(target, CallbackQuery):
        await target.answer()

        try:
            await target.message.delete()
        except Exception:
            pass  # —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ

        await target.message.answer(
            text=text,
            reply_markup=client_menu_keyboard,
            parse_mode="HTML",
        )
    else:
        await target.answer(
            text=text,
            reply_markup=client_menu_keyboard,
            parse_mode="HTML",
        )


@router.callback_query(F.data == "client_menu")
@require_verified_client()
async def handle_menu_callback(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer()
    await deactivate_inline_keyboard(callback.message)
    await show_client_menu(callback.message)


@router.message(F.text == "üìã –ú–æ—ó –∑–∞—è–≤–∫–∏")
@require_verified_client()
async def handle_my_requests(message: Message):
    telegram_id = message.from_user.id
    client = await crud.get_client_by_telegram_id(telegram_id)
    if not client:
        await message.answer("‚õîÔ∏è –í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –∫–ª—ñ—î–Ω—Ç.")
        return

    # —è–∫—â–æ –∫–ª—ñ—î–Ω—Ç —â–µ –Ω–µ —Å—Ç–≤–æ—Ä—é–≤–∞–≤ –∑–∞—è–≤–∫–∏
    total = await crud.count_requests_by_telegram(telegram_id)
    if total == 0:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úçÔ∏è –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É", callback_data="client_application"
                    )
                ]
            ]
        )
        await message.answer(
            "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞—è–≤–æ–∫. –°—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—à—É ‚Äî —ñ —Ç–æ–¥—ñ –º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ–¥–≥–æ—Ç—É—î–º–æ Google Sheet.",
            reply_markup=kb,
        )
        return

    # —è–∫—â–æ Google Sheet —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π ‚Üí –∑–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞—Å–∫—É
    if not client.google_sheet_url:
        await message.answer(
            "‚è≥ –§–æ—Ä–º—É—î–º–æ –≤–∞—à Google Sheet —ñ–∑ –∑–∞—è–≤–∫–∞–º–∏. –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥..."
        )
        ensure_client_request_sheet.delay(telegram_id)
        return

    # —è–∫—â–æ Google Sheet –≤–∂–µ —ñ—Å–Ω—É—î ‚Üí –ø–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîó –í—ñ–¥–∫—Ä–∏—Ç–∏ –∑–∞—è–≤–∫–∏", url=client.google_sheet_url
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚úçÔ∏è –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∑–∞—è–≤–∫—É", callback_data="client_application"
                )
            ],
        ]
    )
    await message.answer("üîó –í–∞—à—ñ –∑–∞—è–≤–∫–∏:", reply_markup=kb)
