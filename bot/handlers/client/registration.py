# bot/handlers/client/registration.py

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from bot.database.database import async_session
from bot.models.client import Client
from sqlalchemy import select
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = Router()


class RegisterClient(StatesGroup):
    full_name = State()
    phone = State()


@router.callback_query(F.data == "role_client")
async def start_client_registration(callback: CallbackQuery, state: FSMContext):
    telegram_id = callback.from_user.id

    async with async_session() as session:
        existing = await session.scalar(
            select(Client).where(Client.telegram_id == telegram_id)
        )

    if existing:
        await callback.message.answer(
            "‚úÖ –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –∫–ª—ñ—î–Ω—Ç.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üì¶ –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É",
                            callback_data="client_application",
                        )
                    ]
                ]
            ),
        )
        await callback.answer()
        return

    await callback.message.answer(
        "üì¶ –í–∏ –æ–±—Ä–∞–ª–∏ —Ä–æ–ª—å *–ö–ª—ñ—î–Ω—Ç–∞*.\n\n"
        "–ü–µ—Ä–µ–¥ —Ç–∏–º, —è–∫ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∑–∞—è–≤–∫–∏, –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é.\n\n"
        "üë§ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ü–Ü–ë:",
        parse_mode="Markdown",
    )
    await state.set_state(RegisterClient.full_name)
    await callback.answer()


@router.message(RegisterClient.full_name)
async def get_client_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer("üì± –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    await state.set_state(RegisterClient.phone)


@router.message(RegisterClient.phone)
async def get_client_phone(message: Message, state: FSMContext):
    data = await state.get_data()
    telegram_id = message.from_user.id

    async with async_session() as session:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
        existing = await session.scalar(
            select(Client).where(Client.telegram_id == telegram_id)
        )
        if existing:
            await message.answer("üîÅ –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –∫–ª—ñ—î–Ω—Ç.")
        else:
            session.add(
                Client(
                    telegram_id=telegram_id,
                    full_name=data["full_name"],
                    phone=message.text,
                )
            )
            await session.commit()
            await message.answer(
                "‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ —É—Å–ø—ñ—à–Ω–∞!",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üì¶ –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É",
                                callback_data="client_application",
                            )
                        ]
                    ]
                ),
            )
    await state.clear()
