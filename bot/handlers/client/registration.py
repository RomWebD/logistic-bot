# bot/handlers/client/registration.py
from aiogram import Router, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from bot.schemas.client import (
    ClientRegistrationData,
    validate_full_name_input,
    validate_phone_input,
    validate_email_input,
    validate_company_name_input,
    validate_tax_id_input,
    validate_website_input,
)
from bot.services.client.client_registration import (
    check_existing_client,
    register_new_client,
)
from bot.ui.keyboards import client_main_kb
from bot.ui.common.summary import build_summary_text, build_summary_main_keyboard

router = Router()

CLIENT_TITLES = {
    "full_name": "–ü–Ü–ë",
    "company_name": "–ö–æ–º–ø–∞–Ω—ñ—è",
    "tax_id": "–Ñ–î–†–ü–û–£/–Ü–ü–ù",
    "phone": "–ú–æ–±—ñ–ª—å–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω",
    "email": "–ü–æ—à—Ç–∞",
    "address": "–ê–¥—Ä–µ—Å–∞ –æ—Ñ—ñ—Å—É",
    "website": "–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç",
}


class RegisterClientFSM(StatesGroup):
    full_name = State()
    phone = State()
    email = State()
    company_name = State()
    tax_id = State()
    address = State()
    website = State()


@router.callback_query(F.data == "role_client")
async def start_client_registration(callback: CallbackQuery, state: FSMContext):
    telegram_id = callback.from_user.id

    if await check_existing_client(telegram_id):
        await callback.message.answer(
            "‚úÖ –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –∫–ª—ñ—î–Ω—Ç.\n–©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏?",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üìÇ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –º–µ–Ω—é", callback_data="client_menu"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üì¶ –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É",
                            callback_data="client_application",
                        ),
                    ],
                ]
            ),
        )
        await callback.answer()
        return

    # —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ FSM-–¥–∞–Ω—ñ
    await state.update_data(telegram_id=telegram_id)
    await callback.message.answer(
        "üë§ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ü–Ü–ë (–ø—Ä–∏–∫–ª–∞–¥: <code>–ü–µ—Ç—Ä–æ –í–∞—Å–∏–ª–∏—à–∏–Ω</code>):"
    )
    await state.set_state(RegisterClientFSM.full_name)
    await callback.answer()


@router.message(RegisterClientFSM.full_name)
async def get_full_name(message: Message, state: FSMContext):
    val, err = validate_full_name_input(message.text)
    if err:
        await message.answer(f"‚ùå {err}\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    await state.update_data(full_name=val)
    await message.answer(
        "üìû –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–Ω–∞–ø—Ä.: <code>+380501234567</code>):",
        parse_mode=ParseMode.HTML,
    )
    # data = await state.get_data()

    # text = build_summary_text(
    #     data, RegisterClientFSM, CLIENT_TITLES, include_progress=True
    # )
    # kb = build_summary_main_keyboard()

    # await message.answer(text, reply_markup=kb, parse_mode=ParseMode.HTML)
    await state.set_state(RegisterClientFSM.phone)


@router.message(RegisterClientFSM.phone)
async def get_phone(message: Message, state: FSMContext):
    val, err = validate_phone_input(message.text)
    if err:
        await message.answer(f"‚ùå {err}\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    await state.update_data(phone=val)
    await message.answer(
        "üìß –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É(–Ω–∞–ø—Ä.: <code>name@example.com</code>):"
    )
    await state.set_state(RegisterClientFSM.email)


@router.message(RegisterClientFSM.email)
async def get_email(message: Message, state: FSMContext):
    val, err = validate_email_input(message.text)
    if err:
        await message.answer(
            f"‚ùå {err}\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (–ø—Ä–∏–∫–ª–∞–¥: <code>name@example.com</code>):"
        )
        return
    await state.update_data(email=val)
    await message.answer(
        "üè¢ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–æ–º–ø–∞–Ω—ñ—ó(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–û–í –ö—Ä–æ–Ω—Ç–µ—Ö–Ω–æ –∞–±–æ <code>–§–û–ü –ü–µ—Ç—Ä–∏—à–∏–Ω –ü–µ—Ç—Ä–æ –ü–µ—Ç—Ä–æ–≤–∏—á</code>):"
    )
    await state.set_state(RegisterClientFSM.company_name)


@router.message(RegisterClientFSM.company_name)
async def get_company_name(message: Message, state: FSMContext):
    val, err = validate_company_name_input(message.text)
    if err:
        await message.answer(f"‚ùå {err}\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    await state.update_data(company_name=val)
    await message.answer(
        "üÜî –í–≤–µ–¥—ñ—Ç—å –Ñ–î–†–ü–û–£ (8 —Ü–∏—Ñ—Ä) –∞–±–æ –Ü–ü–ù (10 —Ü–∏—Ñ—Ä)(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–û–í –ö—Ä–æ–Ω—Ç–µ—Ö–Ω–æ –∞–±–æ <code>12345678</code>):"
    )
    await state.set_state(RegisterClientFSM.tax_id)


@router.message(RegisterClientFSM.tax_id)
async def get_tax_id(message: Message, state: FSMContext):
    val, err = validate_tax_id_input(message.text)
    if err:
        await message.answer(f"‚ùå {err}\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    await state.update_data(tax_id=val)
    await message.answer(
        "üìç –í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –æ—Ñ—ñ—Å—É (–º–æ–∂–Ω–∞ —Å–∫–æ—Ä–æ—á–µ–Ω–æ)(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: <code>–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫</code>):"
    )
    await state.set_state(RegisterClientFSM.address)


@router.message(RegisterClientFSM.address)
async def get_address(message: Message, state: FSMContext):
    addr = (message.text or "").strip()
    await state.update_data(address=addr if addr else None)
    await message.answer(
        "üîó –í–≤–µ–¥—ñ—Ç—å —Å–∞–π—Ç –∫–æ–º–ø–∞–Ω—ñ—ó –∞–±–æ '-' —è–∫—â–æ –Ω–µ–º–∞—î(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: <code>https://google.com</code>):"
    )
    await state.set_state(RegisterClientFSM.website)


@router.message(RegisterClientFSM.website)
async def finalize_registration(message: Message, state: FSMContext):
    website, err = validate_website_input(message.text)
    if err:
        await message.answer(
            f"‚ùå {err}\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å '-' —è–∫—â–æ –Ω–µ–º–∞—î —Å–∞–π—Ç—É:"
        )
        return

    await state.update_data(website=website)
    data = await state.get_data()

    text = build_summary_text(
        data, RegisterClientFSM, CLIENT_TITLES, include_progress=True
    )
    kb = build_summary_main_keyboard(save_kb="save_kb")

    await message.answer(text, reply_markup=kb, parse_mode=ParseMode.HTML)


@router.callback_query(F.data == "save_kb")
async def save_client_registration(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if data:
        payload = ClientRegistrationData(
            telegram_id=data.get("telegram_id"),
            full_name=data.get("full_name"),
            company_name=data.get("company_name"),
            tax_id=data.get("tax_id"),
            phone=data.get("phone"),
            email=data.get("email"),
            address=data.get("address"),
            website=data.get("website"),  # None –∞–±–æ –≤–∞–ª—ñ–¥–Ω–∏–π URL
        )

        success = await register_new_client(payload)
        if not success:
            await callback.message.answer(
                "‚ö†Ô∏è –ö–ª—ñ—î–Ω—Ç –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –∞–±–æ –ø–æ—à—Ç–æ—é –≤–∂–µ —ñ—Å–Ω—É—î."
            )
        else:
            await callback.message.answer(
                "‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ —É—Å–ø—ñ—à–Ω–∞!\n"
                "‚ö†Ô∏è –í–∏ —â–µ –Ω–µ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω—ñ. –ó–∞—á–µ–∫–∞–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=client_main_kb(
                    is_verified=False
                ),  # ‚¨ÖÔ∏è –±–µ–∑ –∫–Ω–æ–ø–∫–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏
            )
        await state.clear()
    else:
        start_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üì¶ –Ø –∫–ª—ñ—î–Ω—Ç", callback_data="role_client")],
            ]
        )
        await callback.message.answer(
            "‚ö†Ô∏è  –¢—Ä–∞–ø–∏–ª–∏—Å—å, —è–∫—ñ—Å—å –ø—Ä–æ–±–ª–µ–º–∏, –Ω–∞ –∂–∞–ª—å, –¥–∞–Ω—ñ –≤—Ç—Ä–∞–µ—á–µ–Ω–æ!\n"
            "‚ö†Ô∏è –ó–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—É —Å–ø–æ—á–∞—Ç–∫—É.",
            reply_markup=start_keyboard,
        )
    await state.clear()
