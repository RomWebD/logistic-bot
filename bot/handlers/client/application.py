# bot/handlers/client/application.py

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from bot.database.database import async_session
from bot.models.shipment_request import Shipment_request
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = Router()


class ClientApplicationFSM(StatesGroup):
    route = State()
    date = State()
    cargo_type = State()
    volume = State()
    weight = State()
    loading = State()
    unloading = State()
    price = State()


@router.callback_query(F.data == "client_application")
async def start_client_application(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –¢–∞–∫", callback_data="confirm_start_application"
                ),
                InlineKeyboardButton(text="‚ùå –ù—ñ", callback_data="cancel_application"),
            ]
        ]
    )
    await callback.message.answer(
        "üìù –ë–∞–∂–∞—î—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∑–∞—è–≤–∫—É –Ω–∞ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è?", reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data == "confirm_start_application")
async def confirm_start_application(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üìç –í–≤–µ–¥—ñ—Ç—å –º–∞—Ä—à—Ä—É—Ç (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –ö–∏—ó–≤ ‚Üí –õ—å–≤—ñ–≤):")
    await state.set_state(ClientApplicationFSM.route)
    await callback.answer()


@router.message(ClientApplicationFSM.route)
async def get_route(message: Message, state: FSMContext):
    await state.update_data(route=message.text)
    await message.answer("üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –ø–æ–¥–∞—á—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 20 –ª–∏–ø–Ω—è –¥–æ 10:00):")
    await state.set_state(ClientApplicationFSM.date)


@router.message(ClientApplicationFSM.date)
async def get_date(message: Message, state: FSMContext):
    await state.update_data(date=message.text)
    await message.answer(
        "üì¶ –í–≤–µ–¥—ñ—Ç—å —Ç–∏–ø –≤–∞–Ω—Ç–∞–∂—É(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ü–æ–±—É—Ç–æ–≤–∞ —Ç–µ—Ö–Ω—ñ–∫–∞, —É–ø–∞–∫–æ–≤–∞–Ω–∞ –Ω–∞ –ø–∞–ª–µ—Ç–∞—Ö):"
    )
    await state.set_state(ClientApplicationFSM.cargo_type)


@router.message(ClientApplicationFSM.cargo_type)
async def get_cargo_type(message: Message, state: FSMContext):
    await state.update_data(cargo_type=message.text)
    await message.answer("üì¶ –í–≤–µ–¥—ñ—Ç—å –æ–± º—î–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 6 –ø–∞–ª–µ—Ç):")
    await state.set_state(ClientApplicationFSM.volume)


@router.message(ClientApplicationFSM.volume)
async def get_volume(message: Message, state: FSMContext):
    await state.update_data(volume=message.text)
    await message.answer("‚öñÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞–≥—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2.2 —Ç):")
    await state.set_state(ClientApplicationFSM.weight)


@router.message(ClientApplicationFSM.weight)
async def get_weight(message: Message, state: FSMContext):
    await state.update_data(weight=message.text)
    await message.answer("üì• –Ø–∫ –±—É–¥–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: —Ä–æ–∫–ª–∞, —Ä–∞–º–ø–∞):")
    await state.set_state(ClientApplicationFSM.loading)


@router.message(ClientApplicationFSM.loading)
async def get_loading(message: Message, state: FSMContext):
    await state.update_data(loading=message.text)
    await message.answer("üì§ –Ø–∫ –±—É–¥–µ –≤–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: —Ä—É—á–Ω–µ):")
    await state.set_state(ClientApplicationFSM.unloading)


@router.message(ClientApplicationFSM.unloading)
async def get_unloading(message: Message, state: FSMContext):
    await state.update_data(unloading=message.text)
    await message.answer("üí∞ –í–≤–µ–¥—ñ—Ç—å –±–∞–∂–∞–Ω—É —Ü—ñ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 8000 –≥—Ä–Ω):")
    await state.set_state(ClientApplicationFSM.price)


@router.message(ClientApplicationFSM.price)
async def finish_application(message: Message, state: FSMContext):
    data = await state.get_data()
    telegram_id = message.from_user.id
    price = message.text.strip()

    new_request = Shipment_request(
        client_telegram_id=telegram_id,
        route=data["route"],
        date=data["date"],
        cargo_type=data["cargo_type"],
        volume=data["volume"],
        weight=data["weight"],
        loading=data["loading"],
        unloading=data["unloading"],
        price=price,
    )

    async with async_session() as session:
        session.add(new_request)
        await session.commit()
        await session.refresh(new_request)

    await message.answer(
        f"""üì¶ <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è:</b>
–ú–∞—Ä—à—Ä—É—Ç: {data["route"]}
–î–∞—Ç–∞ –ø–æ–¥–∞—á—ñ: {data["date"]}
–¢–∏–ø –≤–∞–Ω—Ç–∞–∂—É: {data["cargo_type"]}
–û–± º—î–º: {data["volume"]}
–û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –≤–∞–≥–∞: {data["weight"]}
–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {data["loading"]}
–í–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {data["unloading"]}
–¶—ñ–Ω–∞: {price} –≥—Ä–Ω""",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏ —Ä–µ–π—Å",
                        callback_data=f"accept_{new_request.id}",
                    ),
                    InlineKeyboardButton(
                        text="‚ùå –í—ñ–¥–º–æ–≤–∏—Ç–∏—Å—å",
                        callback_data=f"decline_{new_request.id}",
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="üí¨ –ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —ñ–Ω—à—É —Å—Ç–∞–≤–∫—É",
                        callback_data=f"negotiate_{new_request.id}",
                    )
                ],
            ]
        ),
        parse_mode="HTML",
    )

    await state.clear()


@router.callback_query(F.data == "cancel_application")
async def cancel_application(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üö´ –ó–∞—è–≤–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—Ç–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∑–Ω–æ–≤—É –∫–Ω–æ–ø–∫—É ‚úçÔ∏è –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É."
    )
    await state.clear()
    await callback.answer()
