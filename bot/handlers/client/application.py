from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from bot.forms.shipment_request import ShipmentRequestForm
from bot.forms.aiogram_adapter import FormRouter

router = Router()

# —Å—Ç–≤–æ—Ä—é—î–º–æ —Ñ–æ—Ä–º—É —Ç–∞ –ø—ñ–¥–∫–ª—é—á–∞—î–º–æ —ó—ó —Ä–æ—É—Ç–µ—Ä
shipment_form = ShipmentRequestForm()
shipment_form_router = FormRouter(shipment_form)
router.include_router(shipment_form_router.router)


@router.callback_query(F.data == "client_application")
async def start_client_application(callback: CallbackQuery, state: FSMContext):
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É:
    - –∫–ª–∞–¥–µ–º–æ tg_id —É state (—â–æ–± on_submit –∑–Ω–∞–≤, —Ö—Ç–æ —é–∑–µ—Ä)
    - –ø–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É "–ü–æ—á–∞—Ç–∏" (–≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î FormRouter ‚Üí form_start)
    """
    await state.update_data(tg_id=callback.from_user.id)

    await callback.message.answer(
        "üìù –ë–∞–∂–∞—î—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∑–∞—è–≤–∫—É –Ω–∞ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è?",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü–æ—á–∞—Ç–∏", callback_data="form_start")],
                [
                    InlineKeyboardButton(
                        text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="form_cancel"
                    )
                ],
            ]
        ),
    )
    await callback.answer()


# –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ: —è–∫—â–æ —Ö–æ—á–µ—à –æ–∫—Ä–µ–º—É –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—ñ–¥ —á–∞—Å –Ω–∞–±–æ—Ä—É ‚Äî —Ü–µ –≤–∂–µ —î
# –≤ summary —á–µ—Ä–µ–∑ "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏" (–≥–µ–Ω–µ—Ä—É—î FormRouter).


# # bot/handlers/client/application.py

# from aiogram import Router, F
# from aiogram.types import CallbackQuery, Message
# from aiogram.fsm.state import StatesGroup, State
# from aiogram.fsm.context import FSMContext
# from bot.database.database import get_session
# from bot.handlers.client.crud import update_client_sheet_by_telegram
# from bot.models.client import Client
# from bot.models.shipment_request import Shipment_request
# from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
# from bot.services.google_services.sheets_client import RequestSheetManager
# from bot.services.google_services.utils import request_to_row
# from bot.services.notifier import notify_carriers
# from sqlalchemy.future import select

# from bot.ui.common.summary import build_summary_main_keyboard, build_summary_text

# router = Router()


# class ClientApplicationFSM(StatesGroup):
#     from_city = State()
#     to_city = State()
#     date = State()
#     cargo_type = State()
#     volume = State()
#     weight = State()
#     loading = State()
#     unloading = State()
#     price = State()


# @router.callback_query(F.data == "client_application")
# async def start_client_application(callback: CallbackQuery, state: FSMContext):
#     keyboard = InlineKeyboardMarkup(
#         inline_keyboard=[
#             [
#                 InlineKeyboardButton(
#                     text="‚úÖ –¢–∞–∫", callback_data="confirm_start_application"
#                 ),
#                 InlineKeyboardButton(text="‚ùå –ù—ñ", callback_data="cancel_application"),
#             ]
#         ]
#     )
#     await callback.message.answer(
#         "üìù –ë–∞–∂–∞—î—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∑–∞—è–≤–∫—É –Ω–∞ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è?", reply_markup=keyboard
#     )
#     await callback.answer()


# @router.callback_query(F.data == "confirm_start_application")
# async def confirm_start_application(callback: CallbackQuery, state: FSMContext):
#     await callback.message.answer(
#         "üöö –ó–≤—ñ–¥–∫–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–±—Ä–∞—Ç–∏ –≤–∞–Ω—Ç–∞–∂?\n\n–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: <code>–ö–∏—ó–≤</code>):"
#     )
#     await state.set_state(ClientApplicationFSM.from_city)
#     await callback.answer()


# @router.message(ClientApplicationFSM.from_city)
# async def get_from_route(message: Message, state: FSMContext):
#     await state.update_data(from_city=message.text)
#     await message.answer(
#         "üèÅ –ö—É–¥–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ—Å—Ç–∞–≤–∏—Ç–∏ –≤–∞–Ω—Ç–∞–∂?\n\n–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: <code>–õ—å–≤—ñ–≤</code>):"
#     )
#     await state.set_state(ClientApplicationFSM.to_city)


# @router.message(ClientApplicationFSM.to_city)
# async def get_to_route(message: Message, state: FSMContext):
#     await state.update_data(to_city=message.text)
#     await message.answer(
#         "üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –ø–æ–¥–∞—á—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: <code>20 –ª–∏–ø–Ω—è –¥–æ 10:00</code>):"
#     )
#     await state.set_state(ClientApplicationFSM.date)


# @router.message(ClientApplicationFSM.date)
# async def get_date(message: Message, state: FSMContext):
#     await state.update_data(date=message.text)
#     await message.answer(
#         "üì¶ –í–≤–µ–¥—ñ—Ç—å —Ç–∏–ø –≤–∞–Ω—Ç–∞–∂—É(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, <code>–ü–æ–±—É—Ç–æ–≤–∞ —Ç–µ—Ö–Ω—ñ–∫–∞, —É–ø–∞–∫–æ–≤–∞–Ω–∞ –Ω–∞ –ø–∞–ª–µ—Ç–∞—Ö</code>):"
#     )
#     await state.set_state(ClientApplicationFSM.cargo_type)


# @router.message(ClientApplicationFSM.cargo_type)
# async def get_cargo_type(message: Message, state: FSMContext):
#     await state.update_data(cargo_type=message.text)
#     await message.answer("üì¶ –í–≤–µ–¥—ñ—Ç—å –æ–± º—î–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: <code>6 –ø–∞–ª–µ—Ç</code>):")
#     await state.set_state(ClientApplicationFSM.volume)


# @router.message(ClientApplicationFSM.volume)
# async def get_volume(message: Message, state: FSMContext):
#     await state.update_data(volume=message.text)
#     await message.answer("‚öñÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞–≥—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: <code>2.2 —Ç</code>):")
#     await state.set_state(ClientApplicationFSM.weight)


# @router.message(ClientApplicationFSM.weight)
# async def get_weight(message: Message, state: FSMContext):
#     await state.update_data(weight=message.text)
#     await message.answer(
#         "üì• –Ø–∫ –±—É–¥–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: <code>—Ä–æ–∫–ª–∞, —Ä–∞–º–ø–∞</code>):"
#     )
#     await state.set_state(ClientApplicationFSM.loading)


# @router.message(ClientApplicationFSM.loading)
# async def get_loading(message: Message, state: FSMContext):
#     await state.update_data(loading=message.text)
#     await message.answer("üì§ –Ø–∫ –±—É–¥–µ –≤–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: <code>—Ä—É—á–Ω–µ</code>):")
#     await state.set_state(ClientApplicationFSM.unloading)


# @router.message(ClientApplicationFSM.unloading)
# async def get_unloading(message: Message, state: FSMContext):
#     await state.update_data(unloading=message.text)
#     await message.answer("üí∞ –í–≤–µ–¥—ñ—Ç—å –±–∞–∂–∞–Ω—É —Ü—ñ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: <code>8000 –≥—Ä–Ω</code>):")
#     await state.set_state(ClientApplicationFSM.price)


# @router.message(ClientApplicationFSM.price)
# async def finish_application(message: Message, state: FSMContext):
#     await state.update_data(price=message.text.strip())
#     data = await state.get_data()
#     titles = {
#         "from_city": "–ú–∞—Ä—à—Ä—É—Ç (–∑–≤—ñ–¥–∫–∏)",
#         "to_city": "–ú–∞—Ä—à—Ä—É—Ç (–∫—É–¥–∏)",
#         "date": "–î–∞—Ç–∞ –ø–æ–¥–∞—á—ñ",
#         "cargo_type": "–¢–∏–ø –≤–∞–Ω—Ç–∞–∂—É",
#         "volume": "–û–± º—î–º",
#         "weight": "–í–∞–≥–∞",
#         "loading": "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è",
#         "unloading": "–í–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è",
#         "price": "–¶—ñ–Ω–∞",
#     }

#     summary_text = build_summary_text(
#         state_data=data,
#         group=ClientApplicationFSM,
#         titles=titles,
#         header="üì¶ <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è:</b>",
#     )

#     await message.answer(
#         summary_text,
#         reply_markup=build_summary_main_keyboard(
#             save_kb="confirm_shipment", cancel_kb="cancel_shipment"
#         ),
#         parse_mode="HTML",
#     )


# @router.callback_query(F.data == "confirm_shipment")
# async def confirm_shipment(callback: CallbackQuery, state: FSMContext):
#     data = await state.get_data()
#     telegram_id = callback.from_user.id
#     new_request = Shipment_request(
#         client_telegram_id=telegram_id,
#         from_city=data.get("from_city"),
#         to_city=data.get("to_city"),
#         date=data.get("date"),
#         date_text=data.get("date"),
#         cargo_type=data.get("cargo_type"),
#         volume=data.get("volume"),
#         weight=data.get("weight"),
#         loading=data.get("loading"),
#         unloading=data.get("unloading"),
#         price=data.get("price"),
#     )

#     await callback.message.answer(
#         f"""üì¶ <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è:</b>
#     –ú–∞—Ä—à—Ä—É—Ç: {data.get("from_city")} -> {data.get("to_city")}
#     –î–∞—Ç–∞ –ø–æ–¥–∞—á—ñ: {data["date"]}
#     –¢–∏–ø –≤–∞–Ω—Ç–∞–∂—É: {data["cargo_type"]}
#     –û–± º—î–º: {data["volume"]}
#     –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –≤–∞–≥–∞: {data["weight"]}
#     –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {data["loading"]}
#     –í–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {data["unloading"]}
#     –¶—ñ–Ω–∞: {data.get("price")} –≥—Ä–Ω"""
#     )

#     async for session in get_session():
#         session.add(new_request)
#         await session.commit()
#         await session.refresh(new_request)
#         # 2Ô∏è‚É£ —Ç—è–≥–Ω–µ–º–æ –∫–ª—ñ—î–Ω—Ç–∞
#         result = await session.execute(
#             select(Client).where(Client.telegram_id == telegram_id)
#         )
#         client: Client | None = result.scalar_one_or_none()

#         if client:
#             mgr = RequestSheetManager()
#             sheet_id, sheet_url = mgr.ensure_request_sheet_for_client(
#                 tg_id=telegram_id,
#                 client_full_name=client.full_name,
#                 client_email=client.email,
#                 google_sheet_id=client.google_sheet_id,
#                 google_sheet_url=client.google_sheet_url,
#             )

#             # —è–∫—â–æ —Ñ–∞–π–ª –∑–º—ñ–Ω–∏–≤—Å—è ‚Üí –∞–ø–¥–µ–π—Ç –ë–î
#             if (
#                 sheet_id != client.google_sheet_id
#                 or sheet_url != client.google_sheet_url
#             ):
#                 await update_client_sheet_by_telegram(telegram_id, sheet_id, sheet_url)

#             # 3Ô∏è‚É£ –ø–∏—à–µ–º–æ –∑–∞—è–≤–∫—É –≤ Google Sheets
#             mgr.svc_sheets.put_row(sheet_id, "–ó–∞—è–≤–∫–∏", request_to_row(new_request))

#     await callback.message.edit_text("‚úÖ –ó–∞—è–≤–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
#     # await notify_carriers(bot=callback.bot, request=new_request)

#     await state.clear()
#     await callback.answer()


# @router.callback_query(F.data == "cancel_shipment")
# async def cancel_application(callback: CallbackQuery, state: FSMContext):
#     data = await state.get_data()
#     print(data)
#     await callback.message.edit_text(
#         "üö´ –ó–∞—è–≤–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—Ç–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∑–Ω–æ–≤—É –∫–Ω–æ–ø–∫—É ‚úçÔ∏è –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É."
#     )
#     await state.clear()
#     await callback.answer()
