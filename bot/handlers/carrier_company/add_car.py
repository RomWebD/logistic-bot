from aiogram import Router, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

router = Router()


class RegisterCar(StatesGroup):
    car_type = State()
    plate_number = State()
    weight_capacity = State()
    volume = State()
    loading_type = State()
    driver_fullname = State()
    driver_phone = State()


ALL_FIELDS = [
    "car_type",
    "plate_number",
    "weight_capacity",
    "volume",
    "loading_type",
    "driver_fullname",
    "driver_phone",
]


def get_progress_bar(state_data: dict) -> str:
    filled = sum(1 for field in ALL_FIELDS if state_data.get(field))
    percent = int((filled / len(ALL_FIELDS)) * 100)
    blocks = int(percent / 10)
    return f"\n\nüìä –ü—Ä–æ–≥—Ä–µ—Å: [{'‚ñ†' * blocks}{'‚ñ°' * (10 - blocks)}] {percent}%"


async def go_to_next_step(state: FSMContext, current_step: str, message: Message):
    next_step_index = ALL_FIELDS.index(current_step) + 1
    if next_step_index >= len(ALL_FIELDS):
        await show_summary(message, state)
        return

    next_step = ALL_FIELDS[next_step_index]
    await state.set_state(getattr(RegisterCar, next_step))

    # üü® –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è loading_type
    if next_step == "loading_type":
        await state.update_data(loading_type=set())  # —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø—É—Å—Ç—É –º–Ω–æ–∂–∏–Ω—É
        await message.answer(
            "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–ë—ñ–∫", callback_data="load_side")],
                    [InlineKeyboardButton(text="–í–µ—Ä—Ö", callback_data="load_top")],
                    [InlineKeyboardButton(text="–ó–∞–¥", callback_data="load_back")],
                    [
                        InlineKeyboardButton(
                            text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä", callback_data="load_done"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –ø—É–Ω–∫—Ç",
                            callback_data="skip_loading_type",
                        )
                    ],
                ]
            ),
        )
        return

    # üü© –ó–≤–∏—á–∞–π–Ω—ñ –ø–æ–ª—è
    prompts = {
        "plate_number": "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä(–∏) –∞–≤—Ç–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –ê–°2369–°–ê / –ê–°5729–•–†):",
        "weight_capacity": "–í–≤–µ–¥—ñ—Ç—å –≤–∞–Ω—Ç–∞–∂–æ–ø—ñ–¥–π–æ–º–Ω—ñ—Å—Ç—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 23 —Ç–æ–Ω–∏):",
        "volume": "–í–≤–µ–¥—ñ—Ç—å –æ–± º—î–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 86 –º3):",
        "driver_fullname": "–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –≤–æ–¥—ñ—è:",
        "driver_phone": "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤–æ–¥—ñ—è:",
    }

    prompt_text = prompts.get(next_step, "–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è:")
    await message.answer(
        prompt_text,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –ø—É–Ω–∫—Ç",
                        callback_data=f"skip_{next_step}",
                    )
                ]
            ]
        ),
    )


@router.callback_query(F.data.startswith("skip_"))
async def skip_field(callback: CallbackQuery, state: FSMContext):
    field = callback.data.replace("skip_", "")
    await state.update_data({field: None})
    await go_to_next_step(state, field, callback.message)


async def show_summary(message: Message, state: FSMContext):
    data = await state.get_data()
    summary = (
        f"üöö **–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ:**\n"
        f"–¢–∏–ø: {data.get('car_type') or '-'}\n"
        f"–ù–æ–º–µ—Ä(–∏): {data.get('plate_number') or '-'}\n"
        f"–í–∞–Ω—Ç–∞–∂–æ–ø—ñ–¥–π–æ–º–Ω—ñ—Å—Ç—å: {data.get('weight_capacity') or '-'}\n"
        f"–û–± º—î–º: {data.get('volume') or '-'}\n"
        f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {', '.join(data.get('loading_type', []) or [])}\n"
        f"–í–æ–¥—ñ–π: {data.get('driver_fullname') or '-'}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('driver_phone') or '-'}\n"
    ) + get_progress_bar(data)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏", callback_data="car_save"),
                InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data="car_edit"),
            ],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="car_back")],
        ]
    )

    await message.answer(summary, reply_markup=keyboard)
    await state.clear()


@router.callback_query(F.data == "carrier_add_new_car")
async def start_register_car(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üöõ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–¢–µ–Ω—Ç", callback_data="type_T–µ–Ω—Ç"),
                    InlineKeyboardButton(
                        text="–†–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä", callback_data="type_–†–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä"
                    ),
                    InlineKeyboardButton(
                        text="–¶–∏—Å—Ç–µ—Ä–Ω–∞", callback_data="type_–¶–∏—Å—Ç–µ—Ä–Ω–∞"
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤–æ–∑", callback_data="type_–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤–æ–∑"
                    ),
                    InlineKeyboardButton(
                        text="–Ü–Ω—à–µ (–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É)", callback_data="type_other"
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –ø—É–Ω–∫—Ç",
                        callback_data="skip_car_type",
                    ),
                ],
            ]
        ),
    )
    await state.set_state(RegisterCar.car_type)


@router.callback_query(RegisterCar.car_type, F.data.startswith("type_"))
async def set_vehicle_type(callback: CallbackQuery, state: FSMContext):
    value = callback.data.removeprefix("type_")
    if value == "other":
        await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –≤—Ä—É—á–Ω—É:")
    else:
        await state.update_data(car_type=value)
        await go_to_next_step(state, "car_type", callback.message)


@router.message(RegisterCar.car_type)
async def set_custom_type(message: Message, state: FSMContext):
    await state.update_data(car_type=message.text)
    await go_to_next_step(state, "car_type", message)


@router.message(RegisterCar.plate_number)
async def set_plate(message: Message, state: FSMContext):
    await state.update_data(plate_number=message.text)
    await go_to_next_step(state, "plate_number", message)


@router.message(RegisterCar.weight_capacity)
async def set_capacity(message: Message, state: FSMContext):
    await state.update_data(weight_capacity=message.text)
    await go_to_next_step(state, "weight_capacity", message)


@router.message(RegisterCar.volume)
async def set_volume(message: Message, state: FSMContext):
    await state.update_data(volume=message.text)
    await go_to_next_step(state, "volume", message)


@router.callback_query(RegisterCar.loading_type)
async def choose_loading(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    loading: set = data.get("loading_type", set())

    option_map = {
        "load_side": "–ë—ñ–∫",
        "load_top": "–í–µ—Ä—Ö",
        "load_back": "–ó–∞–¥",
    }

    if callback.data == "load_done":
        await state.update_data(loading_type=list(loading))
        await go_to_next_step(state, "loading_type", callback.message)
        return

    if callback.data in option_map:
        option = option_map[callback.data]
        if option in loading:
            loading.remove(option)
        else:
            loading.add(option)

        await state.update_data(loading_type=loading)

        # ‚úÖ –î–∏–Ω–∞–º—ñ—á–Ω–∏–π —Ç–µ–∫—Å—Ç + markup
        selected_text = (
            f"–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:\n–í–∏–±—Ä–∞–Ω–æ: {', '.join(loading) or '–Ω—ñ—á–æ–≥–æ'}"
        )
        await callback.message.edit_text(
            selected_text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–ë—ñ–∫", callback_data="load_side")],
                    [InlineKeyboardButton(text="–í–µ—Ä—Ö", callback_data="load_top")],
                    [InlineKeyboardButton(text="–ó–∞–¥", callback_data="load_back")],
                    [
                        InlineKeyboardButton(
                            text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä", callback_data="load_done"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –ø—É–Ω–∫—Ç",
                            callback_data="skip_loading_type",
                        )
                    ],
                ]
            ),
        )


# @router.callback_query(RegisterCar.loading_type)
# async def choose_loading(callback: CallbackQuery, state: FSMContext):
#     data = await state.get_data()
#     loading: set = data.get("loading_type", set())

#     if callback.data == "load_done":
#         await state.update_data(loading_type=list(loading))
#         await go_to_next_step(state, "loading_type", callback.message)
#         return

#     option_map = {
#         "load_side": "–ë—ñ–∫",
#         "load_top": "–í–µ—Ä—Ö",
#         "load_back": "–ó–∞–¥",
#     }

#     option = option_map.get(callback.data)
#     if option in loading:
#         loading.remove(option)
#     else:
#         loading.add(option)

#     await state.update_data(loading_type=loading)
#     await callback.answer(f"–í–∏–±—Ä–∞–Ω–æ: {', '.join(loading)}")


@router.message(RegisterCar.driver_fullname)
async def set_driver_name(message: Message, state: FSMContext):
    await state.update_data(driver_fullname=message.text)
    await go_to_next_step(state, "driver_fullname", message)


@router.message(RegisterCar.driver_phone)
async def finish_registration(message: Message, state: FSMContext):
    await state.update_data(driver_phone=message.text)
    await go_to_next_step(state, "driver_phone", message)


@router.callback_query(F.data == "car_save")
async def save_car(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await callback.message.edit_text("‚úÖ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!", reply_markup=None)
    await state.clear()


@router.callback_query(F.data == "car_edit")
async def edit_car(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üîÅ –û–±–µ—Ä—ñ—Ç—å –ø–æ–ª–µ, —è–∫–µ –±–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üöõ –¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É", callback_data="edit_car_type"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üî¢ –ù–æ–º–µ—Ä(–∏) –∞–≤—Ç–æ", callback_data="edit_plate_number"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚öñÔ∏è –í–∞–Ω—Ç–∞–∂–æ–ø—ñ–¥–π–æ–º–Ω—ñ—Å—Ç—å",
                        callback_data="edit_weight_capacity",
                    )
                ],
                [InlineKeyboardButton(text="üì¶ –û–± º—î–º", callback_data="edit_volume")],
                [
                    InlineKeyboardButton(
                        text="üì• –°–ø–æ—Å—ñ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è", callback_data="edit_loading_type"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üë§ –ü–Ü–ë –≤–æ–¥—ñ—è", callback_data="edit_driver_fullname"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üìû –¢–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥—ñ—è", callback_data="edit_driver_phone"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è", callback_data="edit_done"
                    )
                ],
            ]
        ),
    )


@router.callback_query(F.data == "car_back")
async def go_back(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚¨ÖÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤–æ–¥—ñ—è —â–µ —Ä–∞–∑:")
    await state.set_state(RegisterCar.driver_phone)
