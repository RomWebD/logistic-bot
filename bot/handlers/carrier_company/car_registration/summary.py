from aiogram import Router, F
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    Message,
)
from aiogram.fsm.context import FSMContext

from bot.models.TransportVehicle import TransportVehicle
from bot.services.verification import get_carrier_by_telegram_id

from .fsm import get_progress_bar
from sqlalchemy.exc import IntegrityError, SQLAlchemyError

from bot.database.database import async_session

router = Router()


async def show_summary(message: Message, state: FSMContext):
    data = await state.get_data()
    summary = (
        # f"üöö **–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ:**\n"
        f"–¢–∏–ø: {data.get('car_type') or '-'}\n"
        f"–ù–æ–º–µ—Ä(–∏): {data.get('plate_number') or '-'}\n"
        f"–í–∞–Ω—Ç–∞–∂–æ–ø—ñ–¥–π–æ–º–Ω—ñ—Å—Ç—å: {data.get('weight_capacity') or '-'}\n"
        f"–û–± º—î–º: {data.get('volume') or '-'}\n"
        f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {', '.join(data.get('loading_type') or [])}\n"
        f"–í–æ–¥—ñ–π: {data.get('driver_fullname') or '-'}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('driver_phone') or '-'}\n" + get_progress_bar(data)
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏", callback_data="car_save"),
                InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data="car_edit"),
            ],
            [InlineKeyboardButton(text="üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è", callback_data="menu")],
        ]
    )
    # 1. –°–ø–æ—á–∞—Ç–∫—É ‚Äî —Å–∞–º—ñ –¥–∞–Ω—ñ (–±–µ–∑ –∫–Ω–æ–ø–æ–∫)
    await message.answer(
        f"<b>üöö –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ:</b>\n\n<pre>{summary}</pre>", parse_mode="HTML"
    )

    # 2. –ü–æ—Ç—ñ–º ‚Äî –∫–Ω–æ–ø–∫–∏
    await message.answer("‚¨áÔ∏è –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ:", reply_markup=keyboard)
    # –î–ª—è —Ç–æ–≥–æ, —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ –≤ —á–∞—Ç—ñ –ø–æ—Ç–æ—á–Ω—ñ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ –¥–∞–Ω—ñ


@router.callback_query(F.data == "car_save")
async def save_car(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    telegram_id = callback.from_user.id

    # –í–∏—Ç—è–≥—É—î–º–æ –ø–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫–∞ –∑ telegram_id
    carrier = await get_carrier_by_telegram_id(telegram_id)
    if not carrier:
        await callback.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ—ñ–ª—å –ø–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫–∞.")
        return

    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
        required_fields = ["car_type", "plate_number", "weight_capacity"]
        for field in required_fields:
            if not data.get(field):
                raise ValueError(f"–û–±–æ–≤‚Äô—è–∑–∫–æ–≤–µ –ø–æ–ª–µ '{field}' –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–µ")

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±‚Äô—î–∫—Ç–∞ –º–æ–¥–µ–ª—ñ
        vehicle = TransportVehicle(
            vehicle_type=data.get("car_type"),
            registration_number=data.get("plate_number"),
            load_capacity_tons=(data.get("weight_capacity")),
            body_volume_m3=(data.get("volume")) if data.get("volume") else None,
            special_equipment=", ".join(data.get("loading_type") or []),
            driver_fullname=data.get("driver_fullname") or None,
            driver_phone=data.get("driver_phone") or None,
            carrier_company_id=carrier.id,
        )

        # –ó–∞–ø–∏—Å —É –ë–î
        async with async_session() as session:
            session.add(vehicle)
            await session.commit()

        await callback.message.edit_text(
            "‚úÖ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!", reply_markup=None
        )
        await state.clear()

    except ValueError as ve:
        await callback.message.edit_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {ve}")
    except IntegrityError:
        await callback.message.edit_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞: –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —ñ—Å–Ω—É—î."
        )
    except SQLAlchemyError as e:
        await callback.message.edit_text(
            "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        )
        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–æ –∑–∞–ª–æ–≥—É–≤–∞—Ç–∏ e
    except Exception as e:
        await callback.message.edit_text(
            "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏."
        )
        # –¢—É—Ç —Ç–∞–∫–æ–∂ –º–æ–∂–µ—à –ª–æ–≥—É–≤–∞—Ç–∏
