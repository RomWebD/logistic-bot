# bot/handlers/carrier_company/car_registration/edit.py

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from bot.handlers.carrier_company.car_registration.fsm_helpers import (
    go_to_edit_step,
    FIELD_LABELS,
)

router = Router()

EDIT_CALLBACK_PREFIX = "edit_"


@router.callback_query(F.data == "car_edit")
async def edit_car(callback: CallbackQuery, state: FSMContext):
    # –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –∫—ñ–ª—å–∫–æ—Ö –ø–æ–ª—ñ–≤

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üöõ –¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É", callback_data="edit_car_type"
                ),
                InlineKeyboardButton(
                    text="üî¢ –ù–æ–º–µ—Ä(–∏) –∞–≤—Ç–æ", callback_data="edit_plate_number"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="‚öñÔ∏è –í–∞–Ω—Ç–∞–∂–æ–ø—ñ–¥–π–æ–º–Ω—ñ—Å—Ç—å", callback_data="edit_weight_capacity"
                ),
                InlineKeyboardButton(text="üì¶ –û–± º—î–º", callback_data="edit_volume"),
            ],
            [
                InlineKeyboardButton(
                    text="üì• –°–ø–æ—Å—ñ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è", callback_data="edit_loading_type"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="üë§ –ü–Ü–ë –≤–æ–¥—ñ—è", callback_data="edit_driver_fullname"
                ),
                InlineKeyboardButton(
                    text="üìû –¢–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥—ñ—è", callback_data="edit_driver_phone"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ—á–∞—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è", callback_data="edit_start"
                )
            ],
        ]
    )

    await state.update_data(edit_queue=[])  # –æ—á–∏—â–∞—î–º–æ —á–µ—Ä–≥—É –ø–µ—Ä–µ–¥ –≤–∏–±–æ—Ä–æ–º
    await callback.message.edit_text(
        "üîÅ –û–±–µ—Ä—ñ—Ç—å –ø–æ–ª—è, —è–∫—ñ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:", reply_markup=keyboard
    )


@router.callback_query(F.data == "edit_start")
async def begin_edit(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    queue = data.get("edit_queue", [])

    if not queue:
        await callback.answer("–û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω–µ –ø–æ–ª–µ")
        return

    # –ü–æ—á–∏–Ω–∞—î–º–æ –∑ –ø–µ—Ä—à–æ–≥–æ –ø–æ–ª—è
    first_field = queue[0]
    await go_to_edit_step(state, first_field, callback.message)


@router.callback_query(F.data.startswith(EDIT_CALLBACK_PREFIX))
async def select_field_for_edit(callback: CallbackQuery, state: FSMContext):
    field = callback.data.removeprefix(EDIT_CALLBACK_PREFIX)
    data = await state.get_data()
    queue = data.get("edit_queue", [])

    if field not in queue:
        queue.append(field)
        await callback.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ: {FIELD_LABELS.get(field, field)}")
    else:
        queue.remove(field)
        await callback.answer(f"‚ùå –í–∏–¥–∞–ª–µ–Ω–æ: {FIELD_LABELS.get(field, field)}")

    await state.update_data(edit_queue=queue)


async def handle_editing_step(state: FSMContext, field: str, value, message):
    await state.update_data({field: value})
    data = await state.get_data()
    queue = data.get("edit_queue", [])
    queue.remove(field)

    await state.update_data(edit_queue=queue)

    if queue:
        next_field = queue[0]
        await go_to_edit_step(state, next_field, message)
    else:
        from .summary import show_summary

        await show_summary(message, state)
