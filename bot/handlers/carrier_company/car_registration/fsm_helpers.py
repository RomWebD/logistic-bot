from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.fsm.context import FSMContext
from .fsm import RegisterCar, ALL_FIELDS

# –ü—ñ–¥–∫–∞–∑–∫–∏ –¥–æ –∫–æ–∂–Ω–æ–≥–æ –ø–æ–ª—è
FIELD_PROMPTS = {
    "car_type": "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É:",
    "plate_number": "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä(–∏) –∞–≤—Ç–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –ê–°2369–°–ê / –ê–°5729–•–†):",
    "weight_capacity": "–í–≤–µ–¥—ñ—Ç—å –≤–∞–Ω—Ç–∞–∂–æ–ø—ñ–¥–π–æ–º–Ω—ñ—Å—Ç—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 23 —Ç–æ–Ω–∏):",
    "volume": "–í–≤–µ–¥—ñ—Ç—å –æ–± º—î–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 86 –º3):",
    "driver_fullname": "–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –≤–æ–¥—ñ—è:",
    "driver_phone": "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤–æ–¥—ñ—è:",
}
FIELD_LABELS = {
    "car_type": "–¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É",
    "plate_number": "–ù–æ–º–µ—Ä(–∏) –∞–≤—Ç–æ",
    "weight_capacity": "–í–∞–Ω—Ç–∞–∂–æ–ø—ñ–¥–π–æ–º–Ω—ñ—Å—Ç—å",
    "volume": "–û–± º—î–º",
    "loading_type": "–°–ø–æ—Å—ñ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è",
    "driver_fullname": "–ü–Ü–ë –≤–æ–¥—ñ—è",
    "driver_phone": "–¢–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥—ñ—è",
}


def get_car_type_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–¢–µ–Ω—Ç", callback_data="type_–¢–µ–Ω—Ç"),
                InlineKeyboardButton(
                    text="–†–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä", callback_data="type_–†–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä"
                ),
                InlineKeyboardButton(text="–¶–∏—Å—Ç–µ—Ä–Ω–∞", callback_data="type_–¶–∏—Å—Ç–µ—Ä–Ω–∞"),
            ],
            [
                InlineKeyboardButton(
                    text="–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤–æ–∑", callback_data="type_–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤–æ–∑"
                ),
                InlineKeyboardButton(
                    text="–Ü–Ω—à–µ (–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É)", callback_data="type_other"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –ø—É–Ω–∫—Ç", callback_data="skip_car_type"
                ),
            ],
        ]
    )


def get_progress_bar(data: dict) -> str:
    filled = sum(1 for field in ALL_FIELDS if data.get(field))
    percent = int((filled / len(ALL_FIELDS)) * 100)
    blocks = int(percent / 10)
    return f"\n\nüìä –ü—Ä–æ–≥—Ä–µ—Å: [{'‚ñ†' * blocks}{'‚ñ°' * (10 - blocks)}] {percent}%"


async def ask_for_step(state: FSMContext, field: str, message: Message):
    await state.set_state(getattr(RegisterCar, field))
    if field == "car_type":
        await message.answer(
            "üöõ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É:", reply_markup=get_car_type_keyboard()
        )
        return
    # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è —Å–ø–æ—Å–æ–±—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    if field == "loading_type":
        await state.update_data(loading_type=set())
        await message.answer(
            "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–ë—ñ–∫", callback_data="load_side")],
                    [InlineKeyboardButton(text="–í–µ—Ä—Ö", callback_data="load_top")],
                    [InlineKeyboardButton(text="–ó–∞–¥", callback_data="load_back")],
                    [
                        InlineKeyboardButton(
                            text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä", callback_data="load_done"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –ø—É–Ω–∫—Ç",
                            callback_data="skip_loading_type",
                        )
                    ],
                ]
            ),
        )
        return

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —Ñ–æ—Ä–º–∞
    prompt = FIELD_PROMPTS.get(field, "–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è:")
    await message.answer(
        prompt,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –ø—É–Ω–∫—Ç",
                        callback_data=f"skip_{field}",
                    )
                ]
            ]
        ),
    )


async def go_to_next_step(state: FSMContext, current_step: str, message: Message):
    next_step_index = ALL_FIELDS.index(current_step) + 1
    if next_step_index >= len(ALL_FIELDS):
        from .summary import (
            show_summary,
        )  # —ñ–º–ø–æ—Ä—Ç—É—î–º–æ —Ç—É—Ç, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Ü–∏–∫–ª—ñ—á–Ω–æ–≥–æ —ñ–º–ø–æ—Ä—Ç—É

        await show_summary(message, state)
        return

    next_step = ALL_FIELDS[next_step_index]
    await ask_for_step(state, next_step, message)


async def go_to_next_edit_step(state: FSMContext, current_field: str, message: Message):
    data = await state.get_data()
    queue = data.get("edit_queue", [])
    if current_field in queue:
        queue.remove(current_field)
        await state.update_data(edit_queue=queue)

    if not queue:
        from .summary import show_summary

        await show_summary(message, state)
        return

    next_field = queue[0]
    await ask_for_step(state, next_field, message)


async def go_to_edit_step(state: FSMContext, field: str, message: Message):
    """
    –†–µ–¥–∞–≥—É—î –ª–∏—à–µ –æ–¥–Ω–µ –ø–æ–ª–µ (–≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∑ –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è).
    –ü—ñ—Å–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –±—É–¥–µ –ø–æ–∫–∞–∑–∞–Ω–æ summary –∑–Ω–æ–≤—É.
    """
    await ask_for_step(state, field, message)


async def safe_edit_text(
    message: Message | CallbackQuery, text: str, reply_markup=None
):
    try:
        await message.edit_text(text, reply_markup=reply_markup)
    except Exception as e:
        if "message is not modified" not in str(e).lower():
            raise
