from aiogram import Router, F
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    WebAppInfo,
)
from aiogram.filters import Command
from bot.decorators.access import require_verified_carrier
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

router = Router()

# carrier_menu_keyboard = InlineKeyboardMarkup(
#     inline_keyboard=[
#         [
#             InlineKeyboardButton(
#                 text="üöö –ú–æ—ó —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ñ –∑–∞—Å–æ–±–∏", callback_data="carrier_vehicles"
#             )
#         ],
#         [InlineKeyboardButton(text="üìã –ú–æ—ó –∑–∞—è–≤–∫–∏", callback_data="carrier_orders")],
#         [
#             InlineKeyboardButton(
#                 text="üîé –ü–æ—à—É–∫ —Ä–µ–π—Å—ñ–≤", callback_data="carrier_search_routes"
#             )
#         ],
#         [
#             InlineKeyboardButton(
#                 text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é", callback_data="carrier_settings"
#             )
#         ],
#         [InlineKeyboardButton(text="üÜò –ü—ñ–¥—Ç—Ä–∏–º–∫–∞", callback_data="carrier_support")],
#         [
#             InlineKeyboardButton(
#                 text="üí≥ –§—ñ–Ω–∞–Ω—Å–∏ (—Å–∫–æ—Ä–æ)", callback_data="carrier_finance_disabled"
#             )
#         ],
#     ]
# )

# –í–µ–±–∞–ø–ø-–∫–Ω–æ–ø–∫–∞
vehicle_webapp_markup = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–í—ñ–¥–∫—Ä–∏—Ç–∏ –∞–≤—Ç–æ–ø–∞—Ä–∫",
                web_app=WebAppInfo(
                    url="https://docs.google.com/spreadsheets/d/1-JthBRgXotzuJIZUxY-8jwDfwhtDUcicnfm5OtZYAXk/edit?usp=sharing"
                ),  # –∞–±–æ —Ç–≤—ñ–π WebApp
            )
        ],
        [
            InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
                callback_data="carrier_add_new_car",  # –∞–±–æ —Ç–≤—ñ–π WebApp
            ),
        ],
    ]
)


# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–æ—ó –∫–Ω–æ–ø–∫–∏ –∑ ReplyKeyboardMarkup
@router.message(F.text == "üöö –ú–æ—ó —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ñ –∑–∞—Å–æ–±–∏")
async def handle_vehicles_button(message: Message):
    await message.answer(
        "üîó –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–∞—à –∞–≤—Ç–æ–ø–∞—Ä–∫:",
        reply_markup=vehicle_webapp_markup,
    )


carrier_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üöö –ú–æ—ó —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ñ –∑–∞—Å–æ–±–∏"),
            KeyboardButton(text="üìã –ú–æ—ó –∑–∞—è–≤–∫–∏"),
        ],
        [KeyboardButton(text="üîé –ü–æ—à—É–∫ —Ä–µ–π—Å—ñ–≤")],
        [KeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é")],
        [KeyboardButton(text="üÜò –ü—ñ–¥—Ç—Ä–∏–º–∫–∞")],
        [KeyboardButton(text="üí≥ –§—ñ–Ω–∞–Ω—Å–∏ (—Å–∫–æ—Ä–æ)")],
    ],
    resize_keyboard=True,
    input_field_placeholder="–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é",
    one_time_keyboard=False,  # ‚ùóÔ∏è—Ü–µ –≤–∞–∂–ª–∏–≤–æ ‚Äî –º–µ–Ω—é –Ω–µ –∑–Ω–∏–∫–∞—î –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
)


# carrier_menu_keyboard = InlineKeyboardMarkup(
#     inline_keyboard=[
#         [InlineKeyboardButton(text="üöö –ú–æ—ó —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ñ –∑–∞—Å–æ–±–∏", callback_data="carrier_vehicles"),
#         InlineKeyboardButton(text="üìã –ú–æ—ó –∑–∞—è–≤–∫–∏", callback_data="carrier_orders"),
#         InlineKeyboardButton(text="üîé –ü–æ—à—É–∫ —Ä–µ–π—Å—ñ–≤", callback_data="carrier_search_routes")],
#         [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é", callback_data="carrier_settings")],
#         [InlineKeyboardButton(text="üÜò –ü—ñ–¥—Ç—Ä–∏–º–∫–∞", callback_data="carrier_support")],
#         [InlineKeyboardButton(text="üí≥ –§—ñ–Ω–∞–Ω—Å–∏ (—Å–∫–æ—Ä–æ)", callback_data="carrier_finance_disabled")],
#     ]
# )
async def show_carrier_menu(message: Message):
    await message.answer("üìÇ –ú–µ–Ω—é –ø–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫–∞:", reply_markup=carrier_menu_keyboard)


@router.message(Command("menu"))
@require_verified_carrier()
async def handle_menu_command(message: Message):
    await show_carrier_menu(message)


@router.callback_query(F.data == "menu")
@require_verified_carrier()
async def handle_menu_callback(callback: CallbackQuery):
    await callback.answer()
    await show_carrier_menu(callback.message)
