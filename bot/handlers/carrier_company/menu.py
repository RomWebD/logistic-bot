from aiogram import Router, F
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)
from aiogram.fsm.context import FSMContext

from aiogram.filters import Command
from bot.decorators.access import require_verified_carrier
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from bot.handlers.carrier_company import crud
from bot.handlers.carrier_company.car_registration.fsm_helpers import (
    deactivate_inline_keyboard,
)

router = Router()


# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–æ—ó –∫–Ω–æ–ø–∫–∏ –∑ ReplyKeyboardMarkup
# @router.message(F.text == "üöö –ú–æ—ó —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ñ –∑–∞—Å–æ–±–∏")
# async def handle_vehicles_button(message: Message):
#     await message.answer(
#         "üîó –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–∞—à –∞–≤—Ç–æ–ø–∞—Ä–∫:",
#         reply_markup=vehicle_webapp_markup,
#     )
@router.message(F.text == "üöö –ú–æ—ó —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ñ –∑–∞—Å–æ–±–∏")
async def handle_vehicles_button(message: Message):
    telegram_id = message.from_user.id
    sheet_url = await crud.get_sheet_url_by_telegram_id(telegram_id)

    if not sheet_url:
        await message.answer(
            "‚õîÔ∏è –ù–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ –∑–∞—Å–æ–±—É, –¥–æ–±–∞–≤—Ç–µ —Ö–æ—á–∞–± 1 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∏–π –∑–∞—Å—ñ–±, –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∞–≤—Ç–æ–ø–∞—Ä–∫—É"
        )
        inline_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚ûï –î–æ–±–∞–≤–∏—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
                        callback_data="carrier_add_new_car",
                    ),
                ],
            ]
        )
        await message.answer(
            "üîó –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –¥–æ–±–∞–≤–∏—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç:",
            reply_markup=inline_keyboard,
        )
        return

    inline_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–í—ñ–¥–∫—Ä–∏—Ç–∏ –∞–≤—Ç–æ–ø–∞—Ä–∫",
                    url=sheet_url,
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ûï –î–æ–±–∞–≤–∏—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
                    callback_data="carrier_add_new_car",
                ),
            ],
        ]
    )

    await message.answer(
        "üîó –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–∞—à –∞–≤—Ç–æ–ø–∞—Ä–∫:",
        reply_markup=inline_keyboard,
    )


carrier_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üöö –ú–æ—ó —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ñ –∑–∞—Å–æ–±–∏"),
            KeyboardButton(text="üìã –ú–æ—ó –∑–∞—è–≤–∫–∏"),
        ],
        [KeyboardButton(text="üîé –ü–æ—à—É–∫ —Ä–µ–π—Å—ñ–≤")],
        [KeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é")],
        [KeyboardButton(text="üÜò –ü—ñ–¥—Ç—Ä–∏–º–∫–∞")],
        [KeyboardButton(text="üí≥ –§—ñ–Ω–∞–Ω—Å–∏ (—Å–∫–æ—Ä–æ)")],
    ],
    resize_keyboard=True,
    input_field_placeholder="–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é",
    one_time_keyboard=False,  # ‚ùóÔ∏è—Ü–µ –≤–∞–∂–ª–∏–≤–æ ‚Äî –º–µ–Ω—é –Ω–µ –∑–Ω–∏–∫–∞—î –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
)


async def show_carrier_menu(target: Message | CallbackQuery):
    text = "üìÅ –í–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é –ø–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫–∞.\n\n –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ –¥–ª—è –ø–æ–¥–∞–ª—å—à–∏—Ö –¥—ñ–π."

    if isinstance(target, CallbackQuery):
        await target.answer()

        try:
            await target.message.delete()
        except Exception:
            pass  # –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ
        await target.message.answer(
            reply_markup=carrier_menu_keyboard,
            # text="\u2063",
            text=text,
            parse_mode="HTML",
        )
    else:
        await target.answer(
            text=text,
            # text="\u2063",
            reply_markup=carrier_menu_keyboard,
            parse_mode="HTML",
        )


@router.message(Command("menu"))
@require_verified_carrier()
async def handle_menu_command(message: Message):
    await show_carrier_menu(message)


@router.callback_query(F.data == "menu")
@require_verified_carrier()
async def handle_menu_callback(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer()
    await deactivate_inline_keyboard(callback.message)
    await show_carrier_menu(callback.message)
