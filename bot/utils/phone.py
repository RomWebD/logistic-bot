"""
üì± –ú–Ü–ñ–ù–ê–†–û–î–ù–ê –í–ê–õ–Ü–î–ê–¶–Ü–Ø –¢–ï–õ–ï–§–û–ù–Ü–í
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Google libphonenumber
"""

import phonenumbers
# from phonenumbers import geocoder, carrier, timezone
from typing import Optional, Dict, Any, Tuple
import re
from functools import lru_cache


class PhoneService:
    """
    –°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
    Singleton pattern —á–µ—Ä–µ–∑ –∫–ª–∞—Å–æ–≤–∏–π –ø—ñ–¥—Ö—ñ–¥
    """

    # –ö–µ—à—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
    @classmethod
    @lru_cache(maxsize=1000)
    def parse_and_validate(
        cls, phone: str, default_country: str = "UA"
    ) -> Tuple[bool, Optional[str], Optional[str]]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–æ–º–µ—Ä–∞

        Returns:
            (is_valid, formatted_e164, error_message)
        """
        try:
            # –ë–∞–∑–æ–≤–µ –æ—á–∏—â–µ–Ω–Ω—è
            cleaned = cls._clean_number(phone)

            # –ü–∞—Ä—Å–∏–Ω–≥
            parsed = None

            # –°–ø—Ä–æ–±–∞ –ø–∞—Ä—Å–∏—Ç–∏ —è–∫ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π
            if cleaned.startswith("+"):
                try:
                    parsed = phonenumbers.parse(cleaned, None)
                except phonenumbers.NumberParseException:
                    print(f"{str(phonenumbers.NumberParseException)}")

            # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—å - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫—Ä–∞—ó–Ω—É –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            if not parsed:
                parsed = phonenumbers.parse(cleaned, default_country)

            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
            if not phonenumbers.is_valid_number(parsed):
                return False, None, "–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É"

            # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤ E164
            formatted = phonenumbers.format_number(
                parsed, phonenumbers.PhoneNumberFormat.E164
            )

            return True, formatted, None

        except phonenumbers.NumberParseException as e:
            error_map = {
                phonenumbers.NumberParseException.INVALID_COUNTRY_CODE: "–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥ –∫—Ä–∞—ó–Ω–∏",
                phonenumbers.NumberParseException.NOT_A_NUMBER: "–¶–µ –Ω–µ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä",
                phonenumbers.NumberParseException.TOO_SHORT_NSN: "–ù–æ–º–µ—Ä –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π",
                phonenumbers.NumberParseException.TOO_LONG: "–ù–æ–º–µ—Ä –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π",
            }
            return False, None, error_map.get(e.error_type, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç")
        except Exception:
            return False, None, "–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –Ω–æ–º–µ—Ä–∞"

    @staticmethod
    def _clean_number(phone: str) -> str:
        """–û—á–∏—â–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ –≤—ñ–¥ –∑–∞–π–≤–æ–≥–æ"""
        # –ó–∞–º—ñ–Ω—é—î–º–æ 00 –Ω–∞ + –Ω–∞ –ø–æ—á–∞—Ç–∫—É
        if phone.strip().startswith("00"):
            phone = "+" + phone[2:]

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ + –Ω–∞ –ø–æ—á–∞—Ç–∫—É
        has_plus = phone.strip().startswith("+")

        # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å–µ –∫—Ä—ñ–º —Ü–∏—Ñ—Ä
        digits = re.sub(r"\D", "", phone)

        return ("+" + digits) if has_plus else digits

    @classmethod
    def format_for_display(cls, phone: str, style: str = "international") -> str:
        """
        –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è

        Args:
            style: "international" | "national" | "e164"
        """
        try:
            parsed = phonenumbers.parse(phone, None)

            if style == "international":
                return phonenumbers.format_number(
                    parsed, phonenumbers.PhoneNumberFormat.INTERNATIONAL
                )
            elif style == "national":
                return phonenumbers.format_number(
                    parsed, phonenumbers.PhoneNumberFormat.NATIONAL
                )
            else:  # e164
                return phonenumbers.format_number(
                    parsed, phonenumbers.PhoneNumberFormat.E164
                )
        except Exception as err:
            print(f"err:{str(err)}")
            pass

    @classmethod
    def get_info(cls, phone: str) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω–æ–º–µ—Ä"""
        try:
            parsed = phonenumbers.parse(phone, None)

            if not phonenumbers.is_valid_number(parsed):
                return {"valid": False}

            # –¢–∏–ø –Ω–æ–º–µ—Ä–∞
            number_type = phonenumbers.number_type(parsed)
            type_map = {
                phonenumbers.PhoneNumberType.MOBILE: "mobile",
                phonenumbers.PhoneNumberType.FIXED_LINE: "fixed",
                phonenumbers.PhoneNumberType.FIXED_LINE_OR_MOBILE: "fixed_or_mobile",
                phonenumbers.PhoneNumberType.VOIP: "voip",
            }

            info = {
                "valid": True,
                "country_code": phonenumbers.region_code_for_number(parsed),
                "country": geocoder.country_name_for_number(parsed, "en"),
                "type": type_map.get(number_type, "unknown"),
                "formatted": {
                    "e164": phonenumbers.format_number(
                        parsed, phonenumbers.PhoneNumberFormat.E164
                    ),
                    "international": phonenumbers.format_number(
                        parsed, phonenumbers.PhoneNumberFormat.INTERNATIONAL
                    ),
                    "national": phonenumbers.format_number(
                        parsed, phonenumbers.PhoneNumberFormat.NATIONAL
                    ),
                },
            }

            # –û–ø–µ—Ä–∞—Ç–æ—Ä (–Ω–µ –¥–ª—è –≤—Å—ñ—Ö –∫—Ä–∞—ó–Ω)
            try:
                operator = carrier.name_for_number(parsed, "en")
                if operator:
                    info["carrier"] = operator
            except Exception as err:
                print(f"err:{str(err)}")
                pass

            # –ß–∞—Å–æ–≤—ñ –∑–æ–Ω–∏
            try:
                zones = timezone.time_zones_for_number(parsed)
                if zones:
                    info["timezones"] = list(zones)
            except Exception as err:
                print(f"err:{str(err)}")
                pass

            return info

        except Exception as err:
            print(f"err:{str(err)}")
            return {"valid": False}
