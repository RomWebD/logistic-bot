from typing import Any, List, Type
from aiogram.fsm.state import StatesGroup, State


def _state_names(group: Type[StatesGroup]) -> List[str]:
    # –∑–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –∞—Ç—Ä–∏–±—É—Ç–∏ –∫–ª–∞—Å—É, —â–æ —î State
    return [name for name, val in group.__dict__.items() if isinstance(val, State)]


def _is_filled(v: Any) -> bool:
    if v is None:
        return False
    if isinstance(v, str):
        s = v.strip()
        return bool(s) and s != "-"  # –ø–æ—Ä–æ–∂–Ω—î/¬´-¬ª –Ω–µ —Ä–∞—Ö—É—î–º–æ
    if isinstance(v, (list, dict, tuple, set)):
        return len(v) > 0
    return True


def _bar(filled: int, total: int, scale: int = 10) -> str:
    if total <= 0:
        return "[{}] 0% (0/0)".format("‚ñ°" * scale)
    pct = int((filled / total) * 100)
    blocks = min(scale, max(0, int(round(pct * scale / 100))))
    return "[{}{}] {}% ({}/{})".format(
        "‚ñ†" * blocks, "‚ñ°" * (scale - blocks), pct, filled, total
    )


def progress_text(state_data: dict, group: Type[StatesGroup]) -> str:
    """
    –ü—Ä–æ–≥—Ä–µ—Å —Ä–∞—Ö—É—î—Ç—å—Å—è –∑–∞ –Ü–ú–ï–ù–ê–ú–ò —Å—Ç–µ–π—Ç—ñ–≤ —É StatesGroup.
    –ù—ñ—è–∫–∏—Ö –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤.
    """
    fields = _state_names(group)
    total = len(fields)
    filled = sum(1 for f in fields if _is_filled(state_data.get(f)))
    return f"\n\nüìä –ü—Ä–æ–≥—Ä–µ—Å: {_bar(filled, total)}"
