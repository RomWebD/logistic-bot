# bot/forms/client_registration.py
from __future__ import annotations
from typing import Any, Dict
from dataclasses import dataclass

from bot.forms.base import BaseForm, FormField
from bot.services.client.client_registration import (
    check_existing_client,
    register_new_client,
)
from bot.schemas.client import (
    ClientRegistrationData,
    validate_full_name_input,
    validate_phone_input,
    validate_email_input,
    validate_company_name_input,
    validate_tax_id_input,
    validate_website_input,
)
from aiogram.types import Message

from bot.ui.keyboards import client_main_kb


def _not_empty(v: Any) -> str | None:
    if not v or (isinstance(v, str) and not v.strip()):
        return "–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º"
    return None


class ClientRegistrationForm(BaseForm):
    summary_header = "üßë‚Äçüíº <b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞:</b>"
    include_progress = True

    fields = [
        FormField(
            name="full_name",
            title="–ü–Ü–ë",
            kind="text",
            prompt="üë§ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ü–Ü–ë (–ø—Ä–∏–∫–ª–∞–¥: <code>–ü–µ—Ç—Ä–æ –í–∞—Å–∏–ª–∏—à–∏–Ω</code>):",
            validator=lambda v: validate_full_name_input(v)[1],
        ),
        FormField(
            name="phone",
            title="–¢–µ–ª–µ—Ñ–æ–Ω",
            kind="text",
            prompt="üìû –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–Ω–∞–ø—Ä.: <code>+380501234567</code>):",
            validator=lambda v: validate_phone_input(v)[1],
        ),
        FormField(
            name="email",
            title="Email",
            kind="text",
            prompt="üìß –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É (–Ω–∞–ø—Ä.: <code>name@example.com</code>):",
            validator=lambda v: validate_email_input(v)[1],
        ),
        FormField(
            name="company_name",
            title="–ö–æ–º–ø–∞–Ω—ñ—è",
            kind="text",
            prompt="üè¢ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–æ–º–ø–∞–Ω—ñ—ó (–ø—Ä–∏–∫–ª–∞–¥: <code>–¢–û–í –ö—Ä–æ–Ω—Ç–µ—Ö–Ω–æ</code> –∞–±–æ <code>–§–û–ü –ü–µ—Ç—Ä–∏—à–∏–Ω –ü–µ—Ç—Ä–æ</code>):",
            validator=lambda v: validate_company_name_input(v)[1],
        ),
        FormField(
            name="tax_id",
            title="–Ñ–î–†–ü–û–£ / –Ü–ü–ù",
            kind="text",
            prompt="üÜî –í–≤–µ–¥—ñ—Ç—å –Ñ–î–†–ü–û–£ (8 —Ü–∏—Ñ—Ä) –∞–±–æ –Ü–ü–ù (10 —Ü–∏—Ñ—Ä) (–ø—Ä–∏–∫–ª–∞–¥: <code>12345678</code>):",
            validator=lambda v: validate_tax_id_input(v)[1],
        ),
        FormField(
            name="address",
            title="–ê–¥—Ä–µ—Å–∞",
            kind="text",
            prompt="üìç –í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –æ—Ñ—ñ—Å—É (–ø—Ä–∏–∫–ª–∞–¥: <code>–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫</code>):",
            validator=_not_empty,
        ),
        FormField(
            name="website",
            title="–°–∞–π—Ç",
            kind="text",
            prompt="üîó –í–≤–µ–¥—ñ—Ç—å —Å–∞–π—Ç –∫–æ–º–ø–∞–Ω—ñ—ó –∞–±–æ '-' —è–∫—â–æ –Ω–µ–º–∞—î (–ø—Ä–∏–∫–ª–∞–¥: <code>https://google.com</code>):",
            validator=lambda v: validate_website_input(v)[1],
        ),
    ]
    icons = {
        "full_name": "üë§",
        "phone": "üìû",
        "email": "üìß",
        "company_name": "üè¢",
        "tax_id": "üÜî",
        "address": "üìç",
        "website": "üîó",
    }


    async def on_submit(self, data: dict, message: Message):
        telegram_id = data.get("tg_id")
        if not telegram_id:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π telegram_id")
            return

        if await check_existing_client(telegram_id):
            await message.answer("‚ö†Ô∏è –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –∫–ª—ñ—î–Ω—Ç.")
            return

        payload = ClientRegistrationData(
            telegram_id=telegram_id,
            full_name=data["full_name"],
            phone=data["phone"],
            email=data["email"],
            company_name=data["company_name"],
            tax_id=data["tax_id"],
            address=data["address"],
            website=None if data["website"] == "-" else data["website"],
        )

        success = await register_new_client(payload)
        if not success:
            await message.answer("‚ö†Ô∏è –ö–ª—ñ—î–Ω—Ç –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –∞–±–æ –ø–æ—à—Ç–æ—é –≤–∂–µ —ñ—Å–Ω—É—î.")
            return

        # ‚ú® –û–Ω–æ–≤–ª–µ–Ω–Ω—è summary (–æ–ø—Ü—ñ–π–Ω–æ)
        try:
            await message.edit_text(
                self.build_summary(data, include_progress=False),
                parse_mode="HTML"
            )
        except Exception:
            pass

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        await message.answer(
            "‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ —É—Å–ø—ñ—à–Ω–∞!\n"
            "‚ö†Ô∏è –í–∏ —â–µ –Ω–µ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω—ñ. –ó–∞—á–µ–∫–∞–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=client_main_kb(is_verified=False),
        )