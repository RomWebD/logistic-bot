from __future__ import annotations
from dataclasses import dataclass
from typing import Any, Awaitable, Callable, Dict, List, Optional, Sequence, Tuple
from aiogram.types import Message


@dataclass
class FormField:
    name: str
    title: str
    kind: str = "text"  # text | select | multiselect
    prompt: Optional[str] = None
    options: Optional[Sequence[Tuple[str, str]]] = None  # (value, label)
    allow_skip: bool = True
    # —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä: –≤—Ö—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è -> –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
    normalizer: Optional[Callable[[str], Any]] = None
    # –≤–∞–ª—ñ–¥–∞—Ü—ñ—è: –∑–Ω–∞—á–µ–Ω–Ω—è -> –ø–æ–º–∏–ª–∫–∞ –∞–±–æ None
    validator: Optional[Callable[[Any], Optional[str]]] = None


class BaseForm:
    """
    –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∏ —Ñ–æ—Ä–º–∏ (–ø–æ–ª—è, –ø–æ—Ä—è–¥–æ–∫, summary, on_submit).
    –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç—å—Å—è –º—ñ–∂ FSM-–∫–µ–π—Å–∞–º–∏: –∞–≤—Ç–æ, –∫–ª—ñ—î–Ω—Ç, –∑–∞—è–≤–∫–∞, –∫–æ–º–ø–∞–Ω—ñ—è —ñ —Ç.–¥.
    """

    # –ø–æ—Ä—è–¥–æ–∫ –ø–æ–ª—ñ–≤
    fields: List[FormField] = []

    # –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É summary
    summary_header: str = "üìÑ <b>–ü—ñ–¥—Å—É–º–æ–∫</b>"

    # —è–∫—â–æ True ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å–±–∞—Ä
    include_progress: bool = True

    # map[field_name] = icon (–¥–ª—è summary)
    icons: Dict[str, str] = {}

    async def on_submit(
        self, data: Dict[str, Any], message: Message
    ) -> Awaitable[None]:
        """
        –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ–π —Ñ–æ—Ä–º—ñ ‚Äî —â–æ —Ä–æ–±–∏—Ç–∏ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ.
        –ù–∞–ø—Ä., –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É –ë–î + Celery-—Ç–∞—Å–∫–∏.
        """
        raise NotImplementedError

    # --------------- –¥–æ–ø–æ–º—ñ–∂–Ω–µ ---------------

    def field_by_name(self, name: str) -> Optional[FormField]:
        for f in self.fields:
            if f.name == name:
                return f
        return None

    def field_titles(self) -> Dict[str, str]:
        return {f.name: f.title for f in self.fields}
