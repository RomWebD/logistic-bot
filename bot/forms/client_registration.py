# bot/forms/client_registration.py
from __future__ import annotations
from typing import Any, Dict
from dataclasses import dataclass

from bot.forms.base import BaseForm, FormField
from bot.services.client.client_registration import (
    check_existing_client,
    register_new_client,
)
from bot.schemas.client import (
    ClientRegistrationData,
    validate_full_name_input,
    validate_phone_input,
    validate_email_input,
    validate_company_name_input,
    validate_tax_id_input,
    validate_website_input,
)

def _not_empty(v: Any) -> str | None:
    if not v or (isinstance(v, str) and not v.strip()):
        return "–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º"
    return None


class ClientRegistrationForm(BaseForm):
    summary_header = "üßë‚Äçüíº <b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞:</b>"
    include_progress = True

    fields = [
        FormField(
            name="full_name",
            title="–ü–Ü–ë",
            kind="text",
            prompt="üë§ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ü–Ü–ë:",
            validator=lambda v: validate_full_name_input(v)[1],
        ),
        FormField(
            name="phone",
            title="–¢–µ–ª–µ—Ñ–æ–Ω",
            kind="text",
            prompt="üìû –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–Ω–∞–ø—Ä.: <code>+380501234567</code>):",
            validator=lambda v: validate_phone_input(v)[1],
        ),
        FormField(
            name="email",
            title="Email",
            kind="text",
            prompt="üìß –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É:",
            validator=lambda v: validate_email_input(v)[1],
        ),
        FormField(
            name="company_name",
            title="–ö–æ–º–ø–∞–Ω—ñ—è",
            kind="text",
            prompt="üè¢ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–æ–º–ø–∞–Ω—ñ—ó:",
            validator=lambda v: validate_company_name_input(v)[1],
        ),
        FormField(
            name="tax_id",
            title="–Ñ–î–†–ü–û–£ / –Ü–ü–ù",
            kind="text",
            prompt="üÜî –í–≤–µ–¥—ñ—Ç—å –Ñ–î–†–ü–û–£ (8 —Ü–∏—Ñ—Ä) –∞–±–æ –Ü–ü–ù (10 —Ü–∏—Ñ—Ä):",
            validator=lambda v: validate_tax_id_input(v)[1],
        ),
        FormField(
            name="address",
            title="–ê–¥—Ä–µ—Å–∞",
            kind="text",
            prompt="üìç –í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –æ—Ñ—ñ—Å—É (–º–æ–∂–Ω–∞ —Å–∫–æ—Ä–æ—á–µ–Ω–æ):",
            validator=_not_empty,
        ),
        FormField(
            name="website",
            title="–°–∞–π—Ç",
            kind="text",
            prompt="üîó –í–≤–µ–¥—ñ—Ç—å —Å–∞–π—Ç –∫–æ–º–ø–∞–Ω—ñ—ó –∞–±–æ '-' —è–∫—â–æ –Ω–µ–º–∞—î:",
            validator=lambda v: validate_website_input(v)[1],
        ),
    ]

    icons = {
        "full_name": "üë§",
        "phone": "üìû",
        "email": "üìß",
        "company_name": "üè¢",
        "tax_id": "üÜî",
        "address": "üìç",
        "website": "üîó",
    }

    async def on_submit(self, data: Dict[str, Any]):
        telegram_id = data.get("tg_id")
        if telegram_id is None:
            raise RuntimeError("tg_id is required in state data for ClientRegistrationForm")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≤–∂–µ —î –∫–ª—ñ—î–Ω—Ç
        if await check_existing_client(telegram_id):
            return "‚ö†Ô∏è –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –∫–ª—ñ—î–Ω—Ç."

        payload = ClientRegistrationData(
            telegram_id=telegram_id,
            full_name=data["full_name"],
            phone=data["phone"],
            email=data["email"],
            company_name=data["company_name"],
            tax_id=data["tax_id"],
            address=data["address"],
            website=None if data["website"] == "-" else data["website"],
        )

        success = await register_new_client(payload)
        if not success:
            return "‚ö†Ô∏è –ö–ª—ñ—î–Ω—Ç –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –∞–±–æ –ø–æ—à—Ç–æ—é –≤–∂–µ —ñ—Å–Ω—É—î."

        return (
            "‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ —É—Å–ø—ñ—à–Ω–∞!\n"
            "‚ö†Ô∏è –í–∏ —â–µ –Ω–µ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω—ñ. –ó–∞—á–µ–∫–∞–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."
        )
