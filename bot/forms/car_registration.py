# bot/forms/vehicle_registration.py
from __future__ import annotations
from typing import Any, List
from aiogram.types import Message

from bot.forms.base import BaseForm, FormField
from bot.database.database import get_session
from bot.models.transport_vehicle import TransportVehicle
# from bot.repositories.carrier_company_repository import CarrierCompanyRepository
from bot.repositories.google_sheet_repository import GoogleSheetRepository
from bot.models.google_sheets_binding import OwnerType, SheetType

# Celery —Ç–∞—Å–∫–∞ (–Ω–∏–∂—á–µ –¥–æ–¥–∞–º —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é)
from bot.services.celery.tasks import append_vehicle_to_sheet


# --- –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó/–Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó ---
def _not_empty(v: Any) -> str | None:
    if v is None or (isinstance(v, str) and not v.strip()):
        return "–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º"
    return None


def _normalize_float(v: str) -> float | str:
    s = (v or "").lower().replace(",", ".").replace(" ", "")
    try:
        return float(s)
    except Exception:
        return v


def _validate_float(v: Any) -> str | None:
    if isinstance(v, float) and v >= 0:
        return None
    return "–í–∫–∞–∂—ñ—Ç—å —á–∏—Å–ª–æ (0 –∞–±–æ –±—ñ–ª—å—à–µ)."


def _validate_phone(v: str) -> str | None:
    s = (v or "").replace(" ", "")
    return None if (len(s) >= 9 and s[0].isdigit()) else "–ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É"


# –∑–Ω–∞—á–µ–Ω–Ω—è –∑ —Ç–≤–æ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–ª–æ—É
LOADING_OPTIONS: List[tuple[str, str]] = [
    ("side", "–ë—ñ–∫"),
    ("top", "–í–µ—Ä—Ö"),
    ("back", "–ó–∞–¥"),
]

VEHICLE_TYPES: List[tuple[str, str]] = [
    ("–¢–µ–Ω—Ç", "–¢–µ–Ω—Ç"),
    ("–†–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä", "–†–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä"),
    ("–¶–∏—Å—Ç–µ—Ä–Ω–∞", "–¶–∏—Å—Ç–µ—Ä–Ω–∞"),
    ("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤–æ–∑", "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤–æ–∑"),
    ("–Ü–Ω—à–µ", "–Ü–Ω—à–µ (–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É)"),
]


class VehicleRegistrationForm(BaseForm):
    summary_header = "üöö <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ –∑–∞—Å–æ–±—É:</b>"
    include_progress = True

    fields = [
        # 1) —Ç–∏–ø –¢–ó (select)
        FormField(
            name="vehicle_type",
            title="–¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É",
            kind="select",
            prompt="–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É:",
            options=VEHICLE_TYPES,
            allow_skip=False,
        ),
        # 1.1) —è–∫—â–æ –æ–±—Ä–∞–≤ "–Ü–Ω—à–µ" ‚Äî –ø—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É
        FormField(
            name="vehicle_type_other",
            title="–°–≤—ñ–π —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É",
            kind="text",
            prompt="–í–≤–µ–¥—ñ—Ç—å —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É:",
            allow_skip=True,
        ),
        # 2) –Ω–æ–º–µ—Ä(–∏) –∞–≤—Ç–æ: –ø—ñ–¥—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä–µ–ª—ñ–∫ —á–µ—Ä–µ–∑ / –∞–±–æ –ø—Ä–æ–±—ñ–ª–∏,
        #    –º–∏ —Å—Ç–≤–æ—Ä–∏–º–æ –∑–∞–ø–∏—Å(–∏) –ø–æ –∫–æ–∂–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
        FormField(
            name="registration_numbers",
            title="–ù–æ–º–µ—Ä(–∏) –∞–≤—Ç–æ",
            kind="text",
            prompt="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä(–∏) –∞–≤—Ç–æ (–Ω–∞–ø—Ä.: <code>–ê–°2369–°–ê / –ê–°5729–•–†</code>)",
            validator=_not_empty,
        ),
        # 3) –≤–∞–Ω—Ç–∞–∂–æ–ø—ñ–¥–π–æ–º–Ω—ñ—Å—Ç—å (—Ç)
        FormField(
            name="load_capacity_tons",
            title="–í–∞–Ω—Ç–∞–∂–æ–ø—ñ–¥–π–æ–º–Ω—ñ—Å—Ç—å, —Ç",
            kind="text",
            prompt="–í–≤–µ–¥—ñ—Ç—å –≤–∞–Ω—Ç–∞–∂–æ–ø—ñ–¥–π–æ–º–Ω—ñ—Å—Ç—å —É —Ç–æ–Ω–Ω–∞—Ö (–Ω–∞–ø—Ä.: <code>23</code>):",
            normalizer=_normalize_float,
            validator=_validate_float,
        ),
        # 4) –æ–±‚Äô—î–º (–º¬≥) ‚Äî –æ–ø—Ü—ñ–π–Ω–æ
        FormField(
            name="body_volume_m3",
            title="–û–± º—î–º, –º¬≥",
            kind="text",
            prompt="–í–≤–µ–¥—ñ—Ç—å –æ–± º—î–º —É –º¬≥ (–Ω–∞–ø—Ä.: <code>86</code>) –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å:",
            normalizer=_normalize_float,
            allow_skip=True,
            # —è–∫—â–æ —é–∑–µ—Ä –≤–≤–µ–¥–µ —Å–º—ñ—Ç—Ç—è ‚Äî —Ö–∞–π –ø–∞–¥–∞—î –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –ª–∏—à–µ –∫–æ–ª–∏ –Ω–µ –ø—É—Å—Ç–æ
            validator=lambda v: None
            if (v == "" or isinstance(v, float))
            else "–í–∫–∞–∂—ñ—Ç—å —á–∏—Å–ª–æ –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å",
        ),
        # 5) —Å–ø–æ—Å—ñ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (multiselect)
        FormField(
            name="loading_type",
            title="–°–ø–æ—Å—ñ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è",
            kind="multiselect",
            prompt="–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:",
            options=LOADING_OPTIONS,
            allow_skip=True,
        ),
        # 6) –ü–Ü–ë –≤–æ–¥—ñ—è
        FormField(
            name="driver_fullname",
            title="–ü–Ü–ë –≤–æ–¥—ñ—è",
            kind="text",
            prompt="–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –≤–æ–¥—ñ—è:",
            allow_skip=True,
        ),
        # 7) –¢–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥—ñ—è
        FormField(
            name="driver_phone",
            title="–¢–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥—ñ—è",
            kind="text",
            prompt="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤–æ–¥—ñ—è:",
            validator=lambda v: None if v in ("", None) else _validate_phone(v),
            allow_skip=True,
        ),
    ]

    icons = {
        "vehicle_type": "üöõ",
        "vehicle_type_other": "‚úçÔ∏è",
        "registration_numbers": "üî¢",
        "load_capacity_tons": "‚öñÔ∏è",
        "body_volume_m3": "üì¶",
        "loading_type": "üì•",
        "driver_fullname": "üë§",
        "driver_phone": "üìû",
    }

    async def on_submit(self, data: dict, message: Message):
        """
        1) –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –≤—Ö—ñ–¥–Ω—ñ –ø–æ–ª—è (—Ç–∏–ø, –Ω–æ–º–µ—Ä–∏, multiselect)
        2) —Å—Ç–≤–æ—Ä—é—î–º–æ 1..N –∑–∞–ø–∏—Å—ñ–≤ TransportVehicle (—è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ –∫—ñ–ª—å–∫–∞ –Ω–æ–º–µ—Ä—ñ–≤)
        3) –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ Google Sheet (–ê–≤—Ç–æ–ø–∞—Ä–∫) –¥–ª—è –ø–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫–∞ —ñ –¥–æ–¥–∞—î–º–æ —Ä—è–¥–∫–∏
        """
        tg_id: int | None = data.get("tg_id")
        if tg_id is None:
            raise RuntimeError("tg_id is required in state for VehicleRegistrationForm")

        # vehicle_type: —è–∫—â–æ –æ–±—Ä–∞–Ω–æ "–Ü–Ω—à–µ", –ø—ñ–¥–º—ñ–Ω—è—î–º–æ –Ω–∞ manual
        vehicle_type = data.get("vehicle_type") or ""
        if vehicle_type == "–Ü–Ω—à–µ":
            vt_other = (data.get("vehicle_type_other") or "").strip()
            vehicle_type = vt_other or "–Ü–Ω—à–µ"

        # —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –Ω–æ–º–µ—Ä–∏ –∞–≤—Ç–æ: –ø—ñ–¥—Ç—Ä–∏–º—É—î–º–æ "/", ",", –ø—Ä–æ–±—ñ–ª–∏
        raw = (
            (data.get("registration_numbers") or "").replace(",", " ").replace("/", " ")
        )
        numbers = [p.strip().upper() for p in raw.split() if p.strip()]
        if not numbers:
            await message.answer("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ.")
            return

        # multiselect loading_type -> —Ä—è–¥–æ–∫
        loading_list = data.get("loading_type") or []
        # –≤ —Ç–≤–æ—î–º—É —Å—Ç–∞—Ä–æ–º—É —Ñ–ª–æ—É –≤—ñ–¥–æ–±—Ä–∞–∂–∞–ª–∏—Å—å "–ë—ñ–∫/–í–µ—Ä—Ö/–ó–∞–¥" ‚Äî –∑–±–µ—Ä–µ–∂–µ–º–æ —Ç–∞–∫ —Å–∞–º–æ
        loading_str = (
            ", ".join(
                label for val, label in LOADING_OPTIONS if val in set(loading_list)
            )
            or None
        )

        load_capacity = data.get("load_capacity_tons")
        volume = data.get("body_volume_m3")
        driver_fullname = (data.get("driver_fullname") or "").strip() or None
        driver_phone = (data.get("driver_phone") or "").strip() or None

        created = []

        async with get_session() as session:
            # –∑–Ω–∞–π—Ç–∏ –ø–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫–∞ –∑–∞ tg_id
            carrier_repo = CarrierCompanyRepository(session)
            carrier = await carrier_repo.get_by_telegram_id(tg_id)
            if not carrier:
                await message.answer("‚ùå –ü–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–æ—á–Ω—ñ—Ç—å –∑ /start.")
                return

            # —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å–∏ (—É–Ω–∏–∫–∞—Ç–∏–º–µ–º–æ –¥—É–±–ª—è –∑–∞ –Ω–æ–º–µ—Ä–æ–º)
            for reg_num in numbers:
                # —è–∫—â–æ —î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏/–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏
                # –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤—Ä—É—á–Ω—É, —â–æ–± –Ω–µ –ª–æ–≤–∏—Ç–∏ IntegrityError
                exists = (
                    await session.scalar(
                        TransportVehicle.select().where(
                            TransportVehicle.registration_number == reg_num
                        )
                    )
                    if hasattr(TransportVehicle, "select")
                    else None
                )  # –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ —Ä—ñ–∑–Ω–∏—Ö –±–∞–∑–æ–≤–∏—Ö –º–æ–¥–µ–ª–µ–π
                if exists:
                    continue

                tv = TransportVehicle(
                    carrier_company_id=carrier.id,
                    vehicle_type=vehicle_type,
                    registration_number=reg_num,
                    load_capacity_tons=float(load_capacity),
                    body_volume_m3=(
                        float(volume) if isinstance(volume, float) else None
                    ),
                    loading_equipment=loading_str,  # –º–æ–∂–Ω–∞ JSON, –∞–ª–µ —Ç–µ–∫—Å—Ç –¥–æ—Å—Ç–∞—Ç–Ω—å–æ
                    driver_fullname=driver_fullname,
                    driver_phone=driver_phone,
                    is_active=True,
                )
                session.add(tv)
                created.append(tv)

            if not created:
                await message.answer(
                    "‚ÑπÔ∏è –£—Å—ñ –≤–∫–∞–∑–∞–Ω—ñ –Ω–æ–º–µ—Ä–∏ –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å —É –≤–∞—à–æ–º—É –∞–≤—Ç–æ–ø–∞—Ä–∫—É."
                )
                return

            await session.commit()
            for tv in created:
                await session.refresh(tv)

            # –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ binding –¥–ª—è "–ê–≤—Ç–æ–ø–∞—Ä–∫" —ñ –ø—É—Å–∫–∞—î–º–æ Celery –ø–∏—Å–∞—Ç–∏ —Ä—è–¥–æ–∫(–∏)
            sheet_repo = GoogleSheetRepository(session)
            binding = await sheet_repo.get_by_owner_and_type(
                telegram_id=tg_id,
                owner_type=OwnerType.CARRIER,
                sheet_type=SheetType.VEHICLES,
            )
            if not binding:
                await sheet_repo.create_or_update(
                    telegram_id=tg_id,
                    owner_type=OwnerType.CARRIER,
                    sheet_type=SheetType.VEHICLES,
                    sheet_id=None,
                    sheet_url=None,
                )
                await session.commit()

            # —à–ª–µ–º–æ —Ç–∞—Å–∫—É –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞–≤—Ç–æ
            # for tv in created:
            #     append_vehicle_to_sheet.delay(tg_id=tg_id, vehicle_id=tv.id)

        await message.answer(
            f"‚úÖ –î–æ–¥–∞–Ω–æ {len(created)} —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω[–∏–π/—ñ] –∑–∞—Å—ñ–±(–∏) —É –≤–∞—à –∞–≤—Ç–æ–ø–∞—Ä–∫."
        )
