"""
–§–æ—Ä–º–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–ª—ñ—î–Ω—Ç–∞ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º —Å–µ—Ä–≤—ñ—Å—ñ–≤
"""

from bot.forms.base import BaseForm, FormField
from bot.services.client.registration import ClientRegistrationService
from bot.schemas.client import ClientRegistrationData
from bot.utils.validators import (
    validate_phone_field,
    normalize_phone_field,
    validate_email,
    validate_tax_id,
)
from aiogram.types import Message
from bot.ui.keyboards import client_main_kb as get_client_main_menu


class ClientRegistrationForm(BaseForm):
    """
    –§–æ—Ä–º–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–ª—ñ—î–Ω—Ç–∞
    –í—Å—è –ª–æ–≥—ñ–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –≤–∏–Ω–µ—Å–µ–Ω–∞ –≤ –æ–∫—Ä–µ–º—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
    """

    summary_header = "üßë‚Äçüíº <b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞:</b>"
    include_progress = True

    fields = [
        FormField(
            name="full_name",
            title="–ü–Ü–ë",
            kind="text",
            prompt="üë§ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ü–Ü–ë:",
            validator=lambda v: None if len(v) >= 3 else "–ü–Ü–ë –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–µ",
            allow_skip=False,
        ),
        FormField(
            name="phone",
            title="–¢–µ–ª–µ—Ñ–æ–Ω",
            kind="text",
            prompt="üìû –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
            validator=lambda v: validate_phone_field(v, "UA"),
            normalizer=lambda v: normalize_phone_field(v, "UA"),
            allow_skip=False,
        ),
        FormField(
            name="email",
            title="Email",
            kind="text",
            prompt="üìß –í–≤–µ–¥—ñ—Ç—å email:",
            validator=validate_email,
            normalizer=lambda v: v.lower().strip(),
            allow_skip=False,
        ),
        FormField(
            name="company_name",
            title="–ö–æ–º–ø–∞–Ω—ñ—è",
            kind="text",
            prompt="üè¢ –ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó:",
            allow_skip=False,
        ),
        FormField(
            name="tax_id",
            title="–Ñ–î–†–ü–û–£/–Ü–ü–ù",
            kind="text",
            prompt="üÜî –Ñ–î–†–ü–û–£ (8 —Ü–∏—Ñ—Ä) –∞–±–æ –Ü–ü–ù (10 —Ü–∏—Ñ—Ä):",
            validator=validate_tax_id,
            normalizer=lambda v: "".join(filter(str.isdigit, v)),
            allow_skip=False,
        ),
        FormField(
            name="address",
            title="–ê–¥—Ä–µ—Å–∞",
            kind="text",
            prompt="üìç –ê–¥—Ä–µ—Å–∞ –æ—Ñ—ñ—Å—É:",
            allow_skip=False,
        ),
        FormField(
            name="website",
            title="–°–∞–π—Ç",
            kind="text",
            prompt="üåê –°–∞–π—Ç –∫–æ–º–ø–∞–Ω—ñ—ó (–∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å):",
            allow_skip=True,
        ),
    ]

    icons = {
        "full_name": "üë§",
        "phone": "üìû",
        "email": "üìß",
        "company_name": "üè¢",
        "tax_id": "üÜî",
        "address": "üìç",
        "website": "üåê",
    }

    async def on_submit(self, data: dict, message: Message):
        """
        –û–±—Ä–æ–±–∫–∞ —Å–∞–±–º—ñ—Ç—É —Ñ–æ—Ä–º–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤—ñ—Å
        """
        # –û—Ç—Ä–∏–º—É—î–º–æ telegram_id –∑—ñ state
        telegram_id = data.get("tg_id")
        if not telegram_id:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π telegram_id")
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ DTO
        try:
            registration_data = ClientRegistrationData(
                telegram_id=telegram_id,
                full_name=data["full_name"],
                phone=data["phone"],
                email=data["email"],
                company_name=data["company_name"],
                tax_id=data["tax_id"],
                address=data["address"],
                website=data.get("website"),
            )
        except Exception as e:
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: {e}")
            return

        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–µ—Ä–≤—ñ—Å
        async with ClientRegistrationService() as service:
            result = await service.register(registration_data)

        # –û–±—Ä–æ–±–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result["success"]:
            await message.answer(
                "‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!\n‚è≥ –û—á—ñ–∫—É–π—Ç–µ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                reply_markup=get_client_main_menu(is_verified=False),
            )
        else:
            error_messages = {
                "CLIENT_EXISTS": "–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ",
                "EMAIL_EXISTS": "Email –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è",
                "REGISTRATION_ERROR": "–¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ",
            }
            msg = error_messages.get(
                result.get("code"), result.get("message", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞")
            )
            await message.answer(f"‚ùå {msg}")
