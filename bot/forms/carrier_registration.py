# bot/forms/carrier_registration.py
from aiogram.types import Message
from bot.forms.base import BaseForm, FormField
from bot.schemas.carrier import CarrierRegistrationData
from bot.services.carrier.registration import CarrierRegistrationService
from bot.utils.validators import (
    validate_phone_field, normalize_phone_field,
    validate_email, validate_tax_id,
)

class CarrierRegistrationForm(BaseForm):
    summary_header = "üöö <b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫–∞:</b>"
    include_progress = True

    fields = [
        FormField(
            name="contact_full_name",
            title="–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ –æ—Å–æ–±–∞",
            kind="text",
            prompt="üë§ –í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ—ó –æ—Å–æ–±–∏:<code>–Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤–∏—á</code>",
            validator=lambda v: None if len(v) >= 3 else "–ü–Ü–ë –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–µ",
            allow_skip=False,
        ),
        FormField(
            name="company_name",
            title="–ö–æ–º–ø–∞–Ω—ñ—è / –§–û–ü",
            kind="text",
            prompt="üè¢ –ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó –∞–±–æ –§–û–ü:<code>–¢–û–í –Ü–Ω—Ç–µ—Ä—Ç—Ä–µ–π–¥</code>",
            allow_skip=False,
        ),
        FormField(
            name="tax_id",
            title="–Ñ–î–†–ü–û–£/–Ü–ü–ù",
            kind="text",
            prompt="üÜî –Ñ–î–†–ü–û–£ (8) –∞–±–æ –Ü–ü–ù (10):<code>12345678</code>",
            validator=validate_tax_id,
            normalizer=lambda v: "".join(filter(str.isdigit, v)),
            allow_skip=False,
        ),
        FormField(
            name="phone",
            title="–¢–µ–ª–µ—Ñ–æ–Ω",
            kind="text",
            prompt="üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:<code>0689384811</code>",
            validator=lambda v: validate_phone_field(v, "UA"),
            normalizer=lambda v: normalize_phone_field(v, "UA"),
            allow_skip=False,
        ),
        FormField(
            name="email",
            title="Email",
            kind="text",
            prompt="üìß –í–≤–µ–¥—ñ—Ç—å email:<code>company@example.com</code>",
            validator=validate_email,
            normalizer=lambda v: v.lower().strip(),
            allow_skip=False,
        ),
        FormField(
            name="office_address",
            title="–ê–¥—Ä–µ—Å–∞ –æ—Ñ—ñ—Å—É",
            kind="text",
            prompt="üìç –ê–¥—Ä–µ—Å–∞ –æ—Ñ—ñ—Å—É:<code>–ö–∏—ó–≤, –≤—É–ª. ...</code>",
            allow_skip=False,
        ),
        FormField(
            name="website",
            title="–°–∞–π—Ç",
            kind="text",
            prompt="üåê –°–∞–π—Ç –∫–æ–º–ø–∞–Ω—ñ—ó (–º–æ–∂–Ω–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏):<code>https://...</code>",
            allow_skip=True,
        ),
    ]

    icons = {
        "contact_full_name": "üë§",
        "company_name": "üè¢",
        "tax_id": "üÜî",
        "phone": "üìû",
        "email": "üìß",
        "office_address": "üìç",
        "website": "üåê",
    }

    async def on_submit(self, data: dict, message: Message):
        telegram_id = data.get("tg_id")
        if not telegram_id:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π telegram_id")
            return

        try:
            dto = CarrierRegistrationData(
                telegram_id=telegram_id,
                contact_full_name=data["contact_full_name"],
                company_name=data["company_name"],
                tax_id=data["tax_id"],
                phone=data["phone"],
                email=data["email"],
                office_address=data["office_address"],
                website=data.get("website"),
            )
        except Exception as e:
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: {e}")
            return

        async with CarrierRegistrationService() as svc:
            # –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π ¬´–∑–∞–ø–æ—Ä¬ª –≤—ñ–¥ –¥—É–±–ª—é (–æ–±—Ö—ñ–¥ –∫–Ω–æ–ø–æ–∫)
            if await svc.get_by_tg(telegram_id):
                await message.answer("‚úÖ –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –ø–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫.")
                return

            result = await svc.register(dto)

        if result["success"]:
            await message.answer(
                "‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!\n‚è≥ –û—á—ñ–∫—É–π—Ç–µ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
        else:
            errors = {
                "CARRIER_EXISTS": "–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –ø–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫",
                "REGISTRATION_ERROR": "–¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ",
            }
            msg = errors.get(result.get("code"), result.get("message", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞"))
            await message.answer(f"‚ùå {msg}")
