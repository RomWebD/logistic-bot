from __future__ import annotations
from typing import Any, Dict, List
from dataclasses import dataclass

from bot.forms.base import BaseForm, FormField
from bot.database.database import get_session
from bot.models.shipment_request import Shipment_request

# Celery —Ç–∞—Å–∫–∞: –∑–∞–±–µ–∑–ø–µ—á–∏—Ç–∏ —Ñ–∞–π–ª —ñ –¥–æ–ø–∏—Å–∞—Ç–∏ —Ä—è–¥–æ–∫
from bot.services.celery.tasks import append_request_to_sheet
from aiogram.types import Message


def _not_empty(v: Any) -> str | None:
    if v is None or (isinstance(v, str) and not v.strip()):
        return "–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º"
    return None


def _normalize_price(v: str) -> int | str:
    # –¥–æ–ø—É—Å–∫–∞—î–º–æ "8 000", "8000 –≥—Ä–Ω", "8k"
    s = (v or "").lower().replace("–≥—Ä–Ω", "").replace(" ", "")
    if s.endswith("k"):
        s = s[:-1] + "000"
    try:
        return int(s)
    except Exception:
        return v  # –Ω–µ—Ö–∞–π –≤–ø–∞–¥–µ –Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó


def _validate_price(v: Any) -> str | None:
    if isinstance(v, int):
        return None
    return "–í–∫–∞–∂—ñ—Ç—å —Ü—ñ–Ω—É —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 8000)."


class ShipmentRequestForm(BaseForm):
    summary_header = "üì¶ <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è:</b>"
    include_progress = True

    fields = [
        FormField(
            name="from_city",
            title="–ú–∞—Ä—à—Ä—É—Ç (–∑–≤—ñ–¥–∫–∏)",
            kind="text",
            prompt="üöö –ó–≤—ñ–¥–∫–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–±—Ä–∞—Ç–∏ –≤–∞–Ω—Ç–∞–∂? (–Ω–∞–ø—Ä.: <code>–ö–∏—ó–≤</code>)",
            validator=_not_empty,
        ),
        FormField(
            name="to_city",
            title="–ú–∞—Ä—à—Ä—É—Ç (–∫—É–¥–∏)",
            kind="text",
            prompt="üèÅ –ö—É–¥–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ—Å—Ç–∞–≤–∏—Ç–∏ –≤–∞–Ω—Ç–∞–∂? (–Ω–∞–ø—Ä.: <code>–õ—å–≤—ñ–≤</code>)",
            validator=_not_empty,
        ),
        FormField(
            name="date",
            title="–î–∞—Ç–∞ –ø–æ–¥–∞—á—ñ",
            kind="text",
            prompt="üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –ø–æ–¥–∞—á—ñ (–Ω–∞–ø—Ä.: <code>20 –ª–∏–ø–Ω—è –¥–æ 10:00</code>)",
            validator=_not_empty,
        ),
        FormField(
            name="cargo_type",
            title="–¢–∏–ø –≤–∞–Ω—Ç–∞–∂—É",
            kind="text",
            prompt="üì¶ –í–≤–µ–¥—ñ—Ç—å —Ç–∏–ø –≤–∞–Ω—Ç–∞–∂—É (–Ω–∞–ø—Ä.: <code>–ü–æ–±—É—Ç–æ–≤–∞ —Ç–µ—Ö–Ω—ñ–∫–∞, –ø–∞–ª–µ—Ç–∏</code>)",
            validator=_not_empty,
        ),
        FormField(
            name="volume",
            title="–û–± º—î–º",
            kind="text",
            prompt="üì¶ –í–≤–µ–¥—ñ—Ç—å –æ–± º—î–º (–Ω–∞–ø—Ä.: <code>6 –ø–∞–ª–µ—Ç</code>)",
            validator=_not_empty,
        ),
        FormField(
            name="weight",
            title="–í–∞–≥–∞",
            kind="text",
            prompt="‚öñÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞–≥—É (–Ω–∞–ø—Ä.: <code>2.2 —Ç</code>)",
            validator=_not_empty,
        ),
        FormField(
            name="loading",
            title="–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è",
            kind="text",
            prompt="üì• –Ø–∫ –±—É–¥–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è? (–Ω–∞–ø—Ä.: <code>—Ä–æ–∫–ª–∞, —Ä–∞–º–ø–∞</code>)",
            validator=_not_empty,
        ),
        FormField(
            name="unloading",
            title="–í–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è",
            kind="text",
            prompt="üì§ –Ø–∫ –±—É–¥–µ –≤–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è? (–Ω–∞–ø—Ä.: <code>—Ä—É—á–Ω–µ</code>)",
            validator=_not_empty,
        ),
        FormField(
            name="price",
            title="–¶—ñ–Ω–∞",
            kind="text",
            prompt="üí∞ –í–≤–µ–¥—ñ—Ç—å –±–∞–∂–∞–Ω—É —Ü—ñ–Ω—É (–Ω–∞–ø—Ä.: <code>8000 –≥—Ä–Ω</code>)",
            normalizer=_normalize_price,
            validator=_validate_price,
        ),
    ]

    icons = {
        "from_city": "üß≠",
        "to_city": "üìç",
        "date": "üìÖ",
        "cargo_type": "üì¶",
        "volume": "üß±",
        "weight": "‚öñÔ∏è",
        "loading": "üì•",
        "unloading": "üì§",
        "price": "üí∞",
    }

    async def on_submit(self, data: dict, message: Message):
        """
        1) –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î Shipment_request
        2) —Ñ–æ–Ω–æ–º: ensure Google Sheet (+–æ–Ω–æ–≤–∏—Ç–∏ –ë–î, —è–∫—â–æ —Ñ–∞–π–ª —Å—Ç–≤–æ—Ä–∏–≤—Å—è –Ω–æ–≤–∏–π) —ñ –¥–æ–¥–∞—Ç–∏ —Ä—è–¥–æ–∫
        """
        tg_id: int | None = data.get("tg_id")
        if tg_id is None:
            # –∑–∞—Ö–∏—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç: —è–∫—â–æ –∑–∞–±—É–¥–µ–º–æ –ø–æ–∫–ª–∞—Å—Ç–∏ tg_id –≤ state –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º —Ñ–æ—Ä–º–∏
            raise RuntimeError(
                "tg_id is required in state data for ShipmentRequestForm"
            )

        async with get_session() as session:
            req = Shipment_request(
                client_telegram_id=tg_id,
                from_city=data.get("from_city"),
                to_city=data.get("to_city"),
                date=data.get("date"),
                date_text=data.get("date"),
                cargo_type=data.get("cargo_type"),
                volume=data.get("volume"),
                weight=data.get("weight"),
                loading=data.get("loading"),
                unloading=data.get("unloading"),
                price=data.get("price"),
            )
            session.add(req)
            await session.commit()
            await session.refresh(req)

            # —Ñ–æ–Ω–æ–≤–∞ Celery-—Ç–∞—Å–∫–∞: –∑–∞–±–µ–∑–ø–µ—á–∏—Ç–∏ —Ñ–∞–π–ª —ñ –¥–æ–¥–∞—Ç–∏ —Ä—è–¥–æ–∫
            append_request_to_sheet.delay(tg_id=tg_id, request_id=req.id)
