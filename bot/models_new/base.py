# bot/models/base.py
"""
üéØ –ë–ê–ó–û–í–Ü –ö–õ–ê–°–ò - —Ü–µ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –≤—Å—ñ—î—ó –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–∞—Ç–µ—Ä–Ω MIXIN - —Ü–µ –∫–ª–∞—Å–∏ —è–∫—ñ –¥–æ–¥–∞—é—Ç—å —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å
"""

from sqlalchemy.orm import Mapped, mapped_column, declared_attr
from sqlalchemy import DateTime, func, Integer, BigInteger, Boolean, String
from datetime import datetime
from bot.database.database import Base
from typing import Optional


class TimestampMixin:
    """
    üîß MIXIN PATTERN - –¥–æ–¥–∞—î timestamp –ø–æ–ª—è –¥–æ –±—É–¥—å-—è–∫–æ—ó –º–æ–¥–µ–ª—ñ

    –ü—Ä–∏–Ω—Ü–∏–ø DRY (Don't Repeat Yourself):
    - –ó–∞–º—ñ—Å—Ç—å –∫–æ–ø—ñ—é–≤–∞—Ç–∏ created_at/updated_at –≤ –∫–æ–∂–Ω—É –º–æ–¥–µ–ª—å
    - –ú–∏ —Å—Ç–≤–æ—Ä—é—î–º–æ mixin —ñ –Ω–∞—Å–ª—ñ–¥—É—î–º–æ –π–æ–≥–æ

    @declared_attr - —Ü–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä SQLAlchemy –¥–ª—è –¥–∏–Ω–∞–º—ñ—á–Ω–∏—Ö –∞—Ç—Ä–∏–±—É—Ç—ñ–≤
    """

    @declared_attr
    def created_at(cls) -> Mapped[datetime]:
        return mapped_column(
            DateTime(timezone=True),
            server_default=func.now(),
            comment="–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É",
        )

    @declared_attr
    def updated_at(cls) -> Mapped[datetime]:
        return mapped_column(
            DateTime(timezone=True),
            server_default=func.now(),
            onupdate=func.now(),  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è –ø—Ä–∏ UPDATE
            comment="–ß–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è",
        )


class VerifiableMixin:
    """
    üîê MIXIN –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —ñ –¥–ª—è Client —ñ –¥–ª—è CarrierCompany

    –ü—Ä–∏–Ω—Ü–∏–ø SOLID - Single Responsibility:
    - –¶–µ–π mixin –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ç—ñ–ª—å–∫–∏ –∑–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é
    """

    @declared_attr
    def is_verified(cls) -> Mapped[bool]:
        return mapped_column(
            Boolean,
            default=False,
            nullable=False,
            comment="–ß–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á",
        )

    @declared_attr
    def verified_at(cls) -> Mapped[Optional[datetime]]:
        return mapped_column(
            DateTime(timezone=True), nullable=True, comment="–ö–æ–ª–∏ –±—É–≤ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π"
        )

    @declared_attr
    def verified_by(cls) -> Mapped[Optional[int]]:
        return mapped_column(
            Integer, nullable=True, comment="ID –∞–¥–º—ñ–Ω–∞ —è–∫–∏–π –≤–µ—Ä–∏—Ñ—ñ–∫—É–≤–∞–≤"
        )


class TelegramUserMixin:
    """
    ü§ñ MIXIN –¥–ª—è Telegram –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤

    –Ü–Ω–∫–∞–ø—Å—É–ª—è—Ü—ñ—è –ª–æ–≥—ñ–∫–∏ Telegram:
    - –í—Å—ñ Telegram-—Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –ø–æ–ª—è –≤ –æ–¥–Ω–æ–º—É –º—ñ—Å—Ü—ñ
    """

    @declared_attr
    def telegram_id(cls) -> Mapped[int]:
        return mapped_column(
            BigInteger,
            unique=True,
            index=True,
            nullable=False,
            comment="Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
        )

    @declared_attr
    def telegram_username(cls) -> Mapped[Optional[str]]:
        return mapped_column(
            String(255), nullable=True, comment="Telegram username (–±–µ–∑ @)"
        )


class BaseModel(Base):
    """
    üèóÔ∏è –ê–ë–°–¢–†–ê–ö–¢–ù–ò–ô –ë–ê–ó–û–í–ò–ô –ö–õ–ê–°

    __abstract__ = True –æ–∑–Ω–∞—á–∞—î —â–æ SQLAlchemy –Ω–µ —Å—Ç–≤–æ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—é –¥–ª—è —Ü—å–æ–≥–æ –∫–ª–∞—Å—É
    –¶–µ —Ç—ñ–ª—å–∫–∏ —à–∞–±–ª–æ–Ω –¥–ª—è —ñ–Ω—à–∏—Ö –º–æ–¥–µ–ª–µ–π

    –ü–µ—Ä–µ–≤–∞–≥–∏:
    1. –í—Å—ñ –º–æ–¥–µ–ª—ñ –º–∞—Ç–∏–º—É—Ç—å id
    2. –ú–æ–∂–µ–º–æ –¥–æ–¥–∞—Ç–∏ —Å–ø—ñ–ª—å–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è –≤—Å—ñ—Ö –º–æ–¥–µ–ª–µ–π
    """

    __abstract__ = True

    id: Mapped[int] = mapped_column(
        Integer,
        primary_key=True,
        autoincrement=True,
        comment="–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä",
    )

    def __repr__(self) -> str:
        """–ú–∞–≥—ñ—á–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤–∏–≤–æ–¥—É –æ–±'—î–∫—Ç–∞"""
        return f"<{self.__class__.__name__}(id={self.id})>"

    def to_dict(self) -> dict:
        """
        –ú–µ—Ç–æ–¥ —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó - –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –≤ —Å–ª–æ–≤–Ω–∏–∫
        –ü–∞—Ç–µ—Ä–Ω: Data Transfer Object (DTO)
        """
        return {
            column.name: getattr(self, column.name) for column in self.__table__.columns
        }
