"""
üì¶ –ú–û–î–ï–õ–¨ –ó–ê–Ø–í–ö–ò –ù–ê –ü–ï–†–ï–í–ï–ó–ï–ù–ù–Ø
"""

from sqlalchemy.orm import Mapped, mapped_column, relationship, validates
from sqlalchemy import (
    JSON,
    Boolean,
    Float,
    String,
    DateTime,
    Integer,
    Text,
    ForeignKey,
    Enum as SQLEnum,
)
from datetime import datetime
from typing import Optional, List

from bot.models_new.base import BaseModel, TimestampMixin
from bot.models_new import Client, ShipmentOffer
from bot.models_new.enums import ShipmentStatus, CargoType, LoadingType
from bot.services.external.groq import normalize_date_with_groq


class ShipmentRequest(BaseModel, TimestampMixin):
    """
    üìã –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è

    –ü–∞—Ç–µ—Ä–Ω–∏ —Ç–∞ –ø—Ä–∏–Ω—Ü–∏–ø–∏:
    1. Entity Pattern - —Ü–µ –≥–æ–ª–æ–≤–Ω–∞ –±—ñ–∑–Ω–µ—Å-—Å—É—Ç–Ω—ñ—Å—Ç—å
    2. State Pattern - —Å—Ç–∞—Ç—É—Å –∑–º—ñ–Ω—é—î—Ç—å—Å—è —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥–∏
    3. Validation Pattern - –≤–∞–ª—ñ–¥–∞—Ü—ñ—è —á–µ—Ä–µ–∑ @validates
    """

    __tablename__ = "shipment_requests"

    # üîó –ó–í'–Ø–ó–ö–ò
    client_telegram_id: Mapped[int] = mapped_column(
        ForeignKey("clients.telegram_id"),
        nullable=False,
        index=True,
        comment="Telegram ID –∫–ª—ñ—î–Ω—Ç–∞",
    )

    # üìç –ú–ê–†–®–†–£–¢ - —Ä–æ–∑–¥—ñ–ª—è—î–º–æ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –ø–æ—à—É–∫—É
    from_city: Mapped[str] = mapped_column(
        String(100),
        nullable=False,
        index=True,  # –Ü–Ω–¥–µ–∫—Å –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É
        comment="–ú—ñ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è",
    )

    to_city: Mapped[str] = mapped_column(
        String(100), nullable=False, index=True, comment="–ú—ñ—Å—Ç–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è"
    )

    # üìÖ –î–ê–¢–ê - –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ parsed —ñ –æ—Ä–∏–≥—ñ–Ω–∞–ª
    date: Mapped[datetime] = mapped_column(
        DateTime(timezone=True),
        nullable=False,
        index=True,
        comment="–î–∞—Ç–∞ –ø–æ–¥–∞—á—ñ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É",
    )

    date_text: Mapped[str] = mapped_column(
        String(255), nullable=False, comment="–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–∞—Ç–∏ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"
    )

    # üì¶ –í–ê–ù–¢–ê–ñ
    cargo_type: Mapped[CargoType] = mapped_column(
        SQLEnum(CargoType), nullable=False, comment="–¢–∏–ø –≤–∞–Ω—Ç–∞–∂—É"
    )

    cargo_description: Mapped[str] = mapped_column(
        Text, nullable=False, comment="–î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –≤–∞–Ω—Ç–∞–∂—É"
    )

    # –ß–∏—Å–ª–æ–≤—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ —á–∏—Å–ª–∞
    weight_tons: Mapped[float] = mapped_column(
        Float, nullable=False, comment="–í–∞–≥–∞ –≤ —Ç–æ–Ω–Ω–∞—Ö"
    )

    volume_m3: Mapped[Optional[float]] = mapped_column(
        Float, nullable=True, comment="–û–±'—î–º –≤ –º¬≥"
    )

    pallet_count: Mapped[Optional[int]] = mapped_column(
        Integer, nullable=True, comment="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞–ª–µ—Ç"
    )

    # üèóÔ∏è –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø/–†–û–ó–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø
    loading_type: Mapped[List[LoadingType]] = mapped_column(
        JSON,  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ JSON –º–∞—Å–∏–≤
        nullable=False,
        comment="–¢–∏–ø–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è",
    )

    unloading_type: Mapped[List[LoadingType]] = mapped_column(
        JSON, nullable=False, comment="–¢–∏–ø–∏ —Ä–æ–∑–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è"
    )

    # üí∞ –¶–Ü–ù–ê
    price: Mapped[int] = mapped_column(
        Integer, nullable=False, comment="–¶—ñ–Ω–∞ –≤ –∫–æ–ø—ñ–π–∫–∞—Ö (–¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç—ñ)"
    )

    price_negotiable: Mapped[bool] = mapped_column(
        Boolean, default=True, comment="–ß–∏ –º–æ–∂–ª–∏–≤–∏–π —Ç–æ—Ä–≥"
    )

    # üìä –°–¢–ê–¢–£–°
    status: Mapped[ShipmentStatus] = mapped_column(
        SQLEnum(ShipmentStatus),
        default=ShipmentStatus.DRAFT,
        nullable=False,
        index=True,
        comment="–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏",
    )

    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–ª—è
    special_requirements: Mapped[Optional[str]] = mapped_column(
        Text, nullable=True, comment="–û—Å–æ–±–ª–∏–≤—ñ –≤–∏–º–æ–≥–∏"
    )

    # üîó –í–Ü–î–ù–û–®–ï–ù–ù–Ø
    client: Mapped["Client"] = relationship(
        "Client", back_populates="shipment_requests", foreign_keys=[client_telegram_id]
    )

    offers: Mapped[List["ShipmentOffer"]] = relationship(
        "ShipmentOffer", back_populates="shipment", cascade="all, delete-orphan"
    )

    # üîí –í–ê–õ–Ü–î–ê–¢–û–†–ò - –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä @validates –≤—ñ–¥ SQLAlchemy

    @validates("date_text")
    def validate_and_parse_date(self, key, value):
        """
        –í–∞–ª—ñ–¥–∞—Ç–æ—Ä —è–∫–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É —á–µ—Ä–µ–∑ AI
        –ü–∞—Ç–µ—Ä–Ω: Decorator (–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó)
        """
        if not hasattr(self, "_date_parsed"):
            parsed = normalize_date_with_groq(value)
            if not parsed:
                raise ValueError(f"–ù–µ –º–æ–∂—É —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞—Ç—É: {value}")
            self.date = parsed
            self._date_parsed = True
        return value

    @validates("price")
    def validate_price(self, key, value):
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ü—ñ–Ω–∏"""
        if isinstance(value, str):
            # –í–∏—Ç—è–≥—É—î–º–æ —á–∏—Å–ª–∞ –∑ —Ä—è–¥–∫–∞
            digits = "".join(filter(str.isdigit, value))
            value = int(digits) if digits else 0

        if value <= 0:
            raise ValueError("–¶—ñ–Ω–∞ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è")

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–æ–ø—ñ–π–∫–∞—Ö –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç—ñ
        return value * 100

    @validates("weight_tons")
    def validate_weight(self, key, value):
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤–∞–≥–∏ –∑ —Ç–µ–∫—Å—Ç—É"""
        if isinstance(value, str):
            # "2.5 —Ç" -> 2.5
            import re

            match = re.search(r"(\d+\.?\d*)", value)
            if match:
                value = float(match.group(1))

        if value <= 0:
            raise ValueError("–í–∞–≥–∞ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è")

        return value

    # üîß –ú–ï–¢–û–î–ò –ë–Ü–ó–ù–ï–°-–õ–û–ì–Ü–ö–ò

    def can_be_accepted(self) -> bool:
        """
        –ß–∏ –º–æ–∂–Ω–∞ –ø—Ä–∏–π–Ω—è—Ç–∏ –∑–∞—è–≤–∫—É
        –Ü–Ω–∫–∞–ø—Å—É–ª—è—Ü—ñ—è –±—ñ–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª
        """
        return self.status in [ShipmentStatus.PUBLISHED, ShipmentStatus.NEGOTIATING]

    def accept_offer(self, offer_id: int) -> bool:
        """
        –ü—Ä–∏–π–Ω—è—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é
        –ü–∞—Ç–µ—Ä–Ω: State Machine
        """
        if not self.can_be_accepted():
            return False

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é
        offer = next((o for o in self.offers if o.id == offer_id), None)
        if not offer:
            return False

        # –ó–º—ñ–Ω—é—î–º–æ —Å—Ç–∞—Ç—É—Å
        self.status = ShipmentStatus.ACCEPTED
        offer.is_accepted = True

        # –í—ñ–¥—Ö–∏–ª—è—î–º–æ —ñ–Ω—à—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó
        for other_offer in self.offers:
            if other_offer.id != offer_id:
                other_offer.is_rejected = True

        return True

    def cancel(self, reason: Optional[str] = None) -> bool:
        """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞—è–≤–∫–∏"""
        if self.status in [ShipmentStatus.DELIVERED, ShipmentStatus.CANCELLED]:
            return False

        self.status = ShipmentStatus.CANCELLED
        self.cancellation_reason = reason
        return True

    @property
    def route(self) -> str:
        """
        Property - –æ–±—á–∏—Å–ª—é–≤–∞–Ω–µ –ø–æ–ª–µ
        Getter —è–∫–∏–π –≤–∏–≥–ª—è–¥–∞—î —è–∫ –∞—Ç—Ä–∏–±—É—Ç
        """
        return f"{self.from_city} ‚Üí {self.to_city}"

    @property
    def price_uah(self) -> float:
        """–¶—ñ–Ω–∞ –≤ –≥—Ä–∏–≤–Ω—è—Ö (–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∑ –∫–æ–ø—ñ–π–æ–∫)"""
        return self.price / 100

    @property
    def is_expired(self) -> bool:
        """–ß–∏ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞"""
        return self.date < datetime.now()

    def to_message(self) -> str:
        """
        –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        –ü–∞—Ç–µ—Ä–Ω: Template Method
        """
        return f"""üì¶ <b>–ó–∞—è–≤–∫–∞ ‚Ññ{self.id}</b>
        
üìç –ú–∞—Ä—à—Ä—É—Ç: {self.route}
üìÖ –î–∞—Ç–∞: {self.date.strftime("%d.%m.%Y –æ %H:%M")}
üì¶ –í–∞–Ω—Ç–∞–∂: {self.cargo_description}
‚öñÔ∏è –í–∞–≥–∞: {self.weight_tons} —Ç
üí∞ –¶—ñ–Ω–∞: {self.price_uah:,.0f} –≥—Ä–Ω

–°—Ç–∞—Ç—É—Å: {self.status.value}"""
