"""
üöõ –ú–û–î–ï–õ–¨ –ö–û–ú–ü–ê–ù–Ü–á –ü–ï–†–ï–í–Ü–ó–ù–ò–ö–ê
"""

from sqlalchemy.orm import Mapped, mapped_column, relationship
from sqlalchemy import String, ForeignKey
from typing import List, Optional

from bot.models_new.base import (
    BaseModel,
    TimestampMixin,
    VerifiableMixin,
    TelegramUserMixin,
)
from bot.models_new.mixins import ContactInfoMixin, CompanyInfoMixin
from bot.models_new import TransportVehicle, SheetBinding


class CarrierCompany(
    BaseModel,
    TimestampMixin,
    VerifiableMixin,
    TelegramUserMixin,
    ContactInfoMixin,
    CompanyInfoMixin,
):
    """
    üè¢ –ö–æ–º–ø–∞–Ω—ñ—è –ø–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫–∞

    –ü–∞—Ç–µ—Ä–Ω: Aggregate Root (–∫–æ—Ä—ñ–Ω—å –∞–≥—Ä–µ–≥–∞—Ç—É)
    - CarrierCompany —Ü–µ –≥–æ–ª–æ–≤–Ω–∞ —Å—É—Ç–Ω—ñ—Å—Ç—å
    - TransportVehicle –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –Ω–µ—ó
    """

    __tablename__ = "carrier_companies"

    # –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –ø–æ–ª—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫–∞
    google_sheet_url: Mapped[Optional[str]] = mapped_column(
        String(512), nullable=True, comment="URL –¥–æ Google Sheets –∑ –∞–≤—Ç–æ–ø–∞—Ä–∫–æ–º"
    )

    google_sheet_id: Mapped[Optional[str]] = mapped_column(
        String(128), nullable=True, comment="ID Google Sheets"
    )

    # üöö ONE-TO-MANY –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è
    vehicles: Mapped[List["TransportVehicle"]] = relationship(
        "TransportVehicle",
        back_populates="carrier_company",
        cascade="all, delete-orphan",
        lazy="select",  # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –æ–¥—Ä–∞–∑—É –∑ –∫–æ–º–ø–∞–Ω—ñ—î—é
    )

    sheet_bindings: Mapped[List["SheetBinding"]] = relationship(
        "SheetBinding",
        primaryjoin="and_(CarrierCompany.id==SheetBinding.owner_id, SheetBinding.owner_type=='carrier')",
        foreign_keys="[SheetBinding.owner_id]",
        viewonly=True,
    )

    # üìä –û–ë–ß–ò–°–õ–Æ–í–ê–ù–Ü –í–õ–ê–°–¢–ò–í–û–°–¢–Ü

    @property
    def total_vehicles(self) -> int:
        """–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É"""
        return len(self.vehicles) if self.vehicles else 0

    @property
    def total_capacity(self) -> float:
        """–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞–Ω—Ç–∞–∂–æ–ø—ñ–¥–π–æ–º–Ω—ñ—Å—Ç—å"""
        if not self.vehicles:
            return 0.0

        total = 0.0
        for vehicle in self.vehicles:
            try:
                # –í–∏—Ç—è–≥—É—î–º–æ —á–∏—Å–ª–æ –∑ —Ä—è–¥–∫–∞ —Ç–∏–ø—É "23 —Ç"
                capacity = float(
                    "".join(filter(str.isdigit, vehicle.load_capacity_tons or "0"))
                )
                total += capacity
            except ValueError:
                continue
        return total

    def has_vehicle_type(self, vehicle_type: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –ø–µ–≤–Ω–∏–π —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É"""
        return any(v.vehicle_type == vehicle_type for v in self.vehicles)
